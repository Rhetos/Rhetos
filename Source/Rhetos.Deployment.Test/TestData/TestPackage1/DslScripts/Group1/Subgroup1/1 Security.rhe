Module Common
{
	Entity Principal
	{
		ShortString Name { Required; Unique; }
		Logging;
	}

	GuiDataStructure Principal.Default 'Principals'
	{
		GuiSection 'Basic information'
		{
			All;
		}
	}
	
	Entity Claim
	{
		Implements 'Rhetos.Security.IClaim, Rhetos.Security.Interfaces';
		
		ShortString ClaimResource { Required; }
		ShortString ClaimRight { Required; }
		Unique Common.Claim.ClaimResource Common.Claim.ClaimRight;
		Logging;
	}
	
	GuiDataStructure Claim.Default 'Claims'
	{
		GuiSection 'Basic information'
		{
			All;
		}
	}
	
	Entity Permission
	{
		Reference Principal Common.Principal { Required; CascadeDelete; }
		Reference Claim Common.Claim { Required; CascadeDelete; }
		Unique Common.Permission.Principal Common.Permission.Claim;
		Bool IsAuthorized { Required; Description 'If IsAuthorized equals false then autorization is explicitly denied.'; }
		Logging;
	}
	
	DataStructure FilterByPrincipalID
	{
		Reference Principal Common.Principal;
	}

	Specification Permission.FilterByPrincipal 'permission => permission.Principal == filter.Principal' Common.FilterByPrincipalID 'filter';

	DataStructure FilterByPrincipalAndClaimFilter
	{
		Reference Principal Common.Principal;
		Reference Claim Common.Claim;
	}

	Specification Permission.FilterByPrincipalAndClaim 'permission => permission.Principal == filter.Principal && permission.Claim == filter.Claim' Common.FilterByPrincipalAndClaimFilter 'filter';
	
	Browse PermissionBrowse Common.Permission	
	{
		Implements 'Rhetos.Security.IPermission, Rhetos.Security.Interfaces';
		ShortString ClaimResource {From 'Claim.ClaimResource';}
		ShortString ClaimRight {From 'Claim.ClaimRight';}
		ShortString Principal {From 'Principal.Name';}
		Bool IsAuthorized {From IsAuthorized;}
	}

	DataStructure PermissionFilter
	{
		Implements 'Rhetos.Security.IPermissionFilter, Rhetos.Security.Interfaces';
		ShortString ClaimResource;
		ShortString ClaimRight;
		Bool IsAuthorized;
	}

	Specification PermissionBrowse.FindPermission 'permission => permission.ClaimResource == filter.ClaimResource && permission.ClaimRight == filter.ClaimRight && permission.IsAuthorized == filter.IsAuthorized' Common.PermissionFilter 'filter';
	
	GuiBrowseDataStructure Permission.Default 'Permissions' Common.PermissionBrowse
	{
		GuiSection 'Basic information'
		{
			GuiReference Principal;
			GuiReference Claim;
			GuiBool IsAuthorized;
		}
	}	
	
	GuiDataStructure Principal.Default 'Principals'
	{
		GuiSection 'Basic information'
		{
			GuiShortString Name;
		}
	}	
}