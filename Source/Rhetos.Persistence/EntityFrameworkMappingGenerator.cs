/*
    Copyright (C) 2014 Omega software d.o.o.

    This file is part of Rhetos.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

using Rhetos.Compiler;
using Rhetos.Dsl;
using Rhetos.Extensibility;
using Rhetos.Logging;
using Rhetos.Utilities;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;

namespace Rhetos.Persistence
{
    /// <summary>
    /// The generated EDMX contains both "standard ORM mapping" (same as what would be generated by EF from code-first classes),
    /// and custom extensions (for example, new custom functions that extend EF LINQ).
    /// EF DbContext would work without the "standard ORM mapping" part provided (this is a standard approach for code-first),
    /// but then we would get a performance penalty for EF model initialization. By manually specifying the standard ORM mapping
    /// in EDMX (by <see cref="IConceptMapping"/> plugins for <see cref="EntityFrameworkMappingGenerator"/>)
    /// we can improve the DbContext initialization time.
    /// </summary>

    public class EntityFrameworkMappingGenerator : IGenerator
    {
        public const string ProviderManifestTokenPlaceholder = "{EntityFrameworkProviderManifestTokenPlaceholder}";  

        private readonly ICodeGenerator _codeGenerator;
        private readonly IPluginsContainer<IConceptMapping> _plugins;
        private readonly ILogger _performanceLogger;
        private readonly RhetosBuildEnvironment _rhetosBuildEnvironment;

        public EntityFrameworkMappingGenerator(
            ICodeGenerator codeGenerator,
            IPluginsContainer<IConceptMapping> plugins,
            RhetosBuildEnvironment rhetosBuildEnvironment,
            ILogProvider logProvider)
        {
            _plugins = plugins;
            _codeGenerator = codeGenerator;
            _performanceLogger = logProvider.GetLogger("Performance." + GetType().Name);
            _rhetosBuildEnvironment = rhetosBuildEnvironment;
        }

        public void Generate()
        {
            var sw = Stopwatch.StartNew();

            var xmls = _codeGenerator.ExecutePluginsToFilesAsCodeSegments(_plugins, "<!--", "-->", new InitialSnippet());
            foreach (var xml in xmls)
            {
                string filePath = Path.Combine(_rhetosBuildEnvironment.GeneratedAssetsFolder, xml.Key);
                FilesUtility.WriteToFile(filePath, xml.Value.Select(s => XmlUtility.RemoveComments(s)));
            }
            _performanceLogger.Write(sw, "GenerateMapping");
        }

        private class InitialSnippet : IConceptCodeGenerator
        {
            public void GenerateCode(IConceptInfo conceptInfo, ICodeBuilder codeBuilder)
            {
                codeBuilder.InsertCodeToFile($@"<Schema Namespace=""{EntityFrameworkMapping.ConceptualModelNamespace}"" Alias=""Self"" annotation:UseStrongSpatialTypes=""false"" xmlns:annotation=""http://schemas.microsoft.com/ado/2009/02/edm/annotation"" xmlns:customannotation=""http://schemas.microsoft.com/ado/2013/11/edm/customannotation"" xmlns=""http://schemas.microsoft.com/ado/2009/11/edm"">
  {EntityFrameworkMapping.ConceptualModelTag}
  <EntityContainer Name=""EntityFrameworkContext"" customannotation:UseClrTypes=""true"">
    {EntityFrameworkMapping.ConceptualModelEntityContainerTag}
  </EntityContainer>
</Schema>", EntityFrameworkMapping.ConceptualModelFileName);

                codeBuilder.InsertCodeToFile($@"<Mapping Space=""C-S"" xmlns=""http://schemas.microsoft.com/ado/2009/11/mapping/cs"">
  {EntityFrameworkMapping.MappingTag}
  <EntityContainerMapping StorageEntityContainer=""CodeFirstDatabase"" CdmEntityContainer=""EntityFrameworkContext"">
    {EntityFrameworkMapping.MappingEntityContainerTag}
  </EntityContainerMapping>
</Mapping>", EntityFrameworkMapping.MappingModelFileName);

                codeBuilder.InsertCodeToFile($@"<Schema Namespace=""{EntityFrameworkMapping.StorageModelNamespace}"" Provider=""System.Data.SqlClient"" ProviderManifestToken=""{ProviderManifestTokenPlaceholder}"" Alias=""Self"" xmlns:customannotation=""http://schemas.microsoft.com/ado/2013/11/edm/customannotation"" xmlns=""http://schemas.microsoft.com/ado/2009/11/edm/ssdl"">
  {EntityFrameworkMapping.StorageModelTag}
  <EntityContainer Name=""CodeFirstDatabase"">
    {EntityFrameworkMapping.StorageModelEntityContainerTag}
  </EntityContainer>
</Schema>", EntityFrameworkMapping.StorageModelFileName);
            }
        }

        public IEnumerable<string> Dependencies
        {
            get { return Array.Empty<string>(); }
        }
    }
}
