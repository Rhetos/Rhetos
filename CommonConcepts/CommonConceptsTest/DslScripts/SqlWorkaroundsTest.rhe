
Module TestSqlWorkarounds
{
	SqlFunction Fun2 '@a INTEGER' 'RETURNS TABLE AS RETURN SELECT * FROM TestSqlWorkarounds.Fun1(@a)'
	{
		SqlDependsOnFunction TestSqlWorkarounds.Fun1;
	}

	SqlFunction Fun1 '@a INTEGER' 'RETURNS TABLE AS RETURN SELECT x = @a + 1';
	
	Entity E { Integer I; }
	
	SqlObject View3
		'CREATE VIEW TestSqlWorkarounds.V3 AS SELECT I1 AS X FROM V1 UNION ALL SELECT I2 FROM V2'
		'DROP VIEW TestSqlWorkarounds.V3'
	{
		SqlDependsOnSqlObject TestSqlWorkarounds.Views12;
	}
	
	SqlObject Views12
		'CREATE VIEW TestSqlWorkarounds.V1 AS SELECT ID, I+1 AS I1 FROM E
		{SPLIT SCRIPT}
		CREATE VIEW TestSqlWorkarounds.V2 AS SELECT ID, I+2 AS I2 FROM E'
		'DROP VIEW TestSqlWorkarounds.V1
		DROP VIEW TestSqlWorkarounds.V2'
	{
		SqlDependsOn TestSqlWorkarounds.E;
	}
	
	//=============================================
	
	Entity Person { ShortString Name; }
	
	SqlProcedure ComputePersonInfo
		'@NamePattern NVARCHAR(256), @LimitResultCount INT'
		'SELECT TOP (@LimitResultCount)
			Name, NameLength = LEN(Name), PersonID = ID
			FROM TestSqlWorkarounds.Person
			WHERE Name LIKE @NamePattern
			ORDER BY Name'
	{
		SqlDependsOn TestSqlWorkarounds.Person;
	}
	
	Parameter PersonFilter
	{
		ShortString NamePattern;
		Integer LimitResultCount;
	}
	
	Computed PersonInfo 'repository => { throw new Rhetos.UserException("A filter \"TestSqlWorkarounds.PersonFilter\" must be used."); }'
	{
		ShortString Name;
		Integer NameLength;
		Reference Person TestSqlWorkarounds.Person; // Simpler alternative would be "Guid PersonID;"
		
		FilterBy PersonFilter
			'(repository, parameter, executionContext) =>
			{
				var sql = string.Format(
					"EXEC TestSqlWorkarounds.ComputePersonInfo {0}, {1}",
					SqlUtility.QuoteText(parameter.NamePattern), // Prevents SQL injection.
					parameter.LimitResultCount);
					
				var result = new List<TestSqlWorkarounds.PersonInfo>();
				executionContext.SqlExecuter.ExecuteReader(sql,
					sqlReader => result.Add(new TestSqlWorkarounds.PersonInfo
						{
							Name = sqlReader.GetString(0),
							NameLength = sqlReader.GetInt32(1),
							PersonID = SqlUtility.ReadGuid(sqlReader, 2) // Works for both Oracle and MsSql.
						}));
				
				foreach (var item in result) // Binding the reference property.
					item.Person = executionContext.NHibernateSession.Load<TestSqlWorkarounds.Person>(item.PersonID);
					
				return result.ToArray();
			}'
		{
			UseExecutionContext;
		}
	}
}
