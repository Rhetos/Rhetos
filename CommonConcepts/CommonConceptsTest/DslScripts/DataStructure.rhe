Module TestDataStructure { DataStructure SimpleDataStructure1; }

Module TestDataStructure { DataStructure SimpleDataStructure2 { ShortString SimpleShortString; } }

Module TestDataStructure
{
	SqlQueryable SqlQueryable1 "SELECT ID = '5D089327-97EF-418D-A7DF-783D3873A5B4', i = 1, s = 'a'
        UNION ALL SELECT 'DB97EA5F-FB8C-408F-B35B-AD6642C593D7', 2, 'b'"
	{
		Integer i;
		ShortString s;
	}
	
	Entity CachingTestEntity { ShortString S; }
	SqlQueryable CachingTestView "SELECT S FROM TestDataStructure.CachingTestEntity" { ShortString S; AutodetectSqlDependencies; }
	
	Entity Parent;
	Entity Child
	{
		Reference Parent  { Detail; }
	}
    
    Entity ReferenceView { Reference SqlQueryable1; }
}

Module TestBrowse
{
	Entity Other
	{
		ShortString Name;
	}
	
	Entity Source
	{
		ShortString Code;
		Reference Ref TestBrowse.Other;
	}
	
	Browse SF TestBrowse.Source
	{
		ShortString RefName { From 'Ref.Name'; }
	}
	
	Browse SFMulti TestBrowse.Source
	{
		ShortString Code1 { From Code; }
		ShortString Code2 { From Code; }
		ShortString RefName1 { From 'Ref.Name'; }
		ShortString RefName2 { From 'Ref.Name'; }
	}
	
	//=================================
	
	Entity ParentBase
	{
		ShortString Name;
	}
	
	Entity Parent
	{
		Extends TestBrowse.ParentBase;
		ShortString Name;
	}
	
	Entity ParentExtension1
	{
		Extends TestBrowse.Parent;
		ShortString Name1;
	}
	
	Entity ParentExtension2
	{
		Extends TestBrowse.Parent;
		ShortString Name2;
	}

	Entity Complex
	{
		ShortString Code;
		Reference Ref TestBrowse.Parent;
	}

	Browse SFTake TestBrowse.Complex
	{
		Take Code;
		Take 'Ref.Name';
		Take RefName2 'Ref.Name';
		ShortString RefName3 { From 'Ref.Name'; }
		
		Take 'Ref.Base.Name';
		Take 'Ref.Extension_ParentExtension2.Name2';
		
		Take 'Ref.ID';
		Take ParentReference Ref;
	}

	//================================
	
	Entity ParentUniqueReference
	{
		UniqueReference TestBrowse.ParentBase;
		ShortString Name3;
	}

	Browse ParentUniqueReferenceBrowse1 TestBrowse.ParentBase
	{
		Take Name;
		Take Name3 'Extension_ParentUniqueReference.Name3';
	}

	Browse ParentUniqueReferenceBrowse2 TestBrowse.ParentUniqueReference
	{
		Take Name 'Base.Name';
		Take Name3;
	}

	Entity UniqueReferenceChild
	{
		UniqueReference TestBrowse.ParentUniqueReference { CascadeDelete; }
		ShortString Name4;
	}
}

Module TestBrowse2
{
	Browse OtherModuleBrowse TestBrowse.Complex
	{
		Take Code;
		Take 'Ref.Name';
		Take RefName2 'Ref.Name';
		ShortString RefName3 { From 'Ref.Name'; }
		
		Take 'Ref.Base.Name';
		Take 'Ref.Extension_ParentExtension2.Name2';
		
		Take 'Ref.ID';
		Take ParentReference Ref;
	}
}

Module Test13
{
	AutodetectSqlDependencies;

	Entity Old1
	{
		Integer IDOld1;
		ShortString Name;
	}
	
	SqlView Old1View 'SELECT ID, Name FROM Test13.Old1';

	LegacyEntity Legacy1 'Test13.Old2' 'Test13.Old1View'
	{
		ShortString Name;

		SqlDependsOn Test13.Old2;
	}
	
	Entity Old2
	{
		Integer IDOld2;
		ShortString Name;
		Integer Old1ID;
        ShortString Same;
	}
	
	LegacyEntity Legacy2 'Test13.Old2' // view is automatically generated
	{
		ShortString NameNew { LegacyProperty 'Name'; }
		Reference Leg1 Test13.Legacy1 { LegacyProperty 'Old1ID' 'Test13.Old1' 'IDOld1'; }
        ShortString Same;
		
		SqlDependsOn Test13.Old2;
	}
	
	Entity Old3
	{
		Integer Num;
		ShortString Text;
	}
	
	LegacyEntity Legacy3 'Test13.Old3'
	{
		Integer NumNew { LegacyPropertyReadOnly 'Num'; }
		ShortString TextNew { LegacyProperty 'Text'; }
		
		SqlDependsOn Test13.Old3;
	}
	
	Parameter PatternFilter { ShortString Pattern; }
	FilterBy Legacy3.'Test13.PatternFilter'
		'(repos, filter) => repos.Test13.Legacy3.Query().Where(item => item.TextNew.Contains(filter.Pattern) || item.NumNew.CastToString().StartsWith(filter.Pattern)).ToArray()';
        
    Entity OldMultiParent { Integer Key1; ShortString Key2; ShortString Name; }
    Entity OldMultiChild { Integer ParentKey1; ShortString ParentKey2; ShortString Name; }
    LegacyEntity LegacyMultiParent 'Test13.OldMultiParent'
    {
        ShortString Name;
        SqlDependsOn Test13.OldMultiParent;
    }
    LegacyEntity LegacyMultiChild 'Test13.OldMultiChild'
    {
        Reference Parent Test13.LegacyMultiParent { LegacyProperty 'ParentKey1, ParentKey2' 'Test13.OldMultiParent' 'Key1, Key2'; }
        ShortString Name;
        SqlDependsOn Test13.OldMultiChild;
		SqlDependsOn Test13.LegacyMultiParent;
    }
}

Module TestBinary
{
	Entity E
	{
		Binary Blob;
	}
}

Module TestTypes
{
    Entity Simple
    {
        DateTime Start;
        Decimal Length;
    }
    
    // TestTypes.Reader is used to avoid TestTypes.Simple caching side effects.
    SqlQueryable Reader 'SELECT * FROM TestTypes.Simple'
    {
		AutodetectSqlDependencies;
        AllPropertiesFrom TestTypes.Simple;
    }
}

Module TestUnique
{
	Entity R
	{
		ShortString S;
	}
	
	Entity E
	{
		ShortString S;
		Integer I;
		Reference R TestUnique.R;
		
		Unique TestUnique.E.S TestUnique.E.I TestUnique.E.R;
	}
	
	Entity Multi
	{
		ShortString S;
		Integer I;
		Reference R TestUnique.R;
		
		UniqueMultiple 'S R';
		UniqueMultiple 'I';
	}
	
	LegacyEntity LE 'TestUnique.E'
	{
		ShortString S { Unique; } // Should be checked in the application, not in database.
		Integer I;
		
		SqlDependsOn TestUnique.E;
	}
}

Module TestCloning
{
	Entity Parent
	{
		ShortString Name;
	}
	
	Entity Base
	{
		ShortString Name;
	}
	
	Entity Source
	{
		Extends TestCloning.Base;
		
		Integer Code { Unique; }
		ShortString Name { Required; }
		DateTime Start;
		Reference Parent TestCloning.Parent { Detail; }
		SqlIndexMultiple 'Start Parent';
	}
	
	Entity Clone1
	{
		PropertyFrom TestCloning.Source.Start;
	}
	
	Entity Clone2
	{
		PropertyFrom TestCloning.Source.Name;
		PropertyFrom TestCloning.Source.Parent;
		PropertyFrom TestCloning.Source.Start;
	}

	Entity Clone3
	{
		AllPropertiesWithCascadeDeleteFrom TestCloning.Source;
	}

	Entity SourceUR
	{
		UniqueReference TestCloning.Base { CascadeDelete; }
		ShortString Name;
	}

	Entity CloneUR
	{
		AllPropertiesWithCascadeDeleteFrom TestCloning.SourceUR;
	}
}

Module TestDataStructure
{
	Entity SaveTesterBase
	{
		ShortString Name;
	}
	
	Entity SaveTester
	{
		Extends TestDataStructure.SaveTesterBase;
		ShortString Name;
		Integer Code;
		
		SaveMethod
		{
			ArgumentValidation CodeNot123
				'foreach (var item in insertedNew.Concat(updatedNew))
					if (item.Code == 123)
						throw new Rhetos.UserException("[Test] Cannot insert code 123.");';

			Initialization DefaultNameValue
				'foreach (var item in insertedNew)
					if (item.Name == "default")
						item.Name = "initialized";';

			LoadOldItems
			{
				Take Name;
				Take 'Base.Name';
			}

			OldDataLoaded LockedBaseName456
				'foreach (var item in deletedOld.Concat(updatedOld))
					if (item.BaseName == "456")
						throw new Rhetos.UserException("[Test] Cannot change locked base name 456.");';
			
			OnSaveUpdate UpdateBaseIfNameChanged
			'
				var modifiedItemsName = updatedOld
					.Zip(updatedNew, (oldValue, newValue) => new { oldValue, newValue })
					// Safe universal property comparison:
					.Where(modified => modified.oldValue.Name == null && modified.newValue.Name != null || modified.oldValue.Name != null && !modified.oldValue.Name.Equals(modified.newValue.Name))
					.ToList();
				
				var updateIds = modifiedItemsName.Select(modified => modified.newValue.ID);
				var updateBaseItems = _executionContext.Repository.TestDataStructure.SaveTesterBase.Filter(updateIds);
				foreach (var baseItem in updateBaseItems)
					baseItem.Name += " updated";
				_executionContext.Repository.TestDataStructure.SaveTesterBase.Update(updateBaseItems);
			';
				
			OnSaveValidate DenyChangeOfLockedName
			'
				var lockedItemModifiedName = updatedOld
					.Zip(updatedNew, (oldValue, newValue) => new { oldValue, newValue })
					// Safe universal property comparison:
					.Where(modified => modified.oldValue.Name == null && modified.newValue.Name != null || modified.oldValue.Name != null && !modified.oldValue.Name.Equals(modified.newValue.Name))
					.Where(modified => modified.oldValue.BaseName != null && modified.oldValue.BaseName.Contains("lock"))
					.FirstOrDefault();
				
				if (lockedItemModifiedName != null)
					throw new Rhetos.UserException(string.Format(
						"[Test] It is not allowed to modify locked item''s name ''{0}'' => ''{1}''.",
						lockedItemModifiedName.oldValue.Name,
						lockedItemModifiedName.newValue.Name));
			';

			AfterSave LogModifications
			'
				var modifiedItemsName = updatedOld
					.Zip(updatedNew, (oldValue, newValue) => new { oldValue, newValue })
					.Where(modified => modified.oldValue.Name == null && modified.newValue.Name != null || modified.oldValue.Name != null && !modified.oldValue.Name.Equals(modified.newValue.Name))
					.ToList();
				var logger = _logProvider.GetLogger("test");
				foreach (var modified in modifiedItemsName)
					logger.Write(Rhetos.Logging.EventType.Info, () => (modified.oldValue.Name ?? "null") + " => " + (modified.newValue.Name ?? "null"));
			';

			Initialization LogDeletions
			'
				if (deletedIds.Any())
				{
					var names = this.Query(deletedIds.Select(d => d.ID)).Select(d => d.Name);
					var report = string.Join(", ", names.OrderBy(name => name)) + ".";
					_logProvider.GetLogger("SaveTester.Deletions").Write(Rhetos.Logging.EventType.Info, () => report);
				}
			';
		}

		RepositoryUses '_logProvider' 'Rhetos.Logging.ILogProvider, Rhetos.Logging.Interfaces';
	}

	Entity TestMethod
	{
		ShortString Name;

		RepositoryMember TestMethod
			'public IQueryable<Common.Queryable.TestDataStructure_TestMethod> TestMethod()
			{
				return this.Query().Where(x => x.Name == "test");
			}';

		FilterBy Limit5 '(repository, parameter) =>
			{
				return TestMethod().Take(5).ToArray();
			}
		';
	}

	Parameter Limit5;
}

Module TestQueryable
{
	Parameter StartsWith
	{
		ShortString Prefix;
	}
	
	Entity Simple
	{
		ShortString Name;
		Query 'TestQueryable.StartsWith' 'parameter => Query().Where(item => item.Name.StartsWith(parameter.Prefix))';
	}
}

Module TestLazyLoad
{
	Entity Parent
	{
		ShortString Name;
		LinkedItems Children TestLazyLoad.Simple.Parent;
	}
	
	Entity SimpleBase
	{
		ShortString Name;
	}
	
	Entity Simple
	{
		Extends TestLazyLoad.SimpleBase;
		Reference Parent;
		ShortString Name;
	}
}

Module TestReference
{
	Entity Parent
	{
		ShortString Name;
	}

	Entity Child
	{
		Reference Parent;
		ShortString Name;
	}
}
