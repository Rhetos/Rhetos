Module TestMaxLength
{
	Entity Old1
	{
		Integer IDOld1;
		ShortString Name { MaxLength 5; }
		ShortString Name2;
		Binary Blob;
	}
}

Module TestAutoCode
{
	Entity Simple
	{
		ShortString Code {  AutoCode; }
	}
	
	Entity IntGroup
	{
		Integer Grouping;
		ShortString Code {  AutoCodeForEach TestAutoCode.IntGroup.Grouping; }
	}
	
	Entity StringGroup
	{
		ShortString Grouping;
		ShortString Code {  AutoCodeForEach TestAutoCode.StringGroup.Grouping; }
	}
	
	Entity ReferenceGroup
	{
		Reference Grouping TestAutoCode.Simple;
		ShortString Code {  AutoCodeForEach TestAutoCode.ReferenceGroup.Grouping; }
	}
    
    Entity Grouping
	{
		ShortString Code {  AutoCode; }
	}
	
	Entity ShortReferenceGroup
	{
		Reference Grouping;
		ShortString Code {  AutoCodeForEach TestAutoCode.ShortReferenceGroup.Grouping; }
	}
   
   Entity DoubleAutoCode
	{
		ShortString CodeA {  AutoCode; }
		ShortString CodeB {  AutoCode; }
	}
   
   Entity DoubleAutoCodeWithGroup
	{
		ShortString Grouping;
		ShortString CodeA {  AutoCode; }
		ShortString CodeB {  AutoCodeForEach TestAutoCode.DoubleAutoCodeWithGroup.Grouping; }
	}
    
   Entity IntegerAutoCode
	{
		Integer Code {  AutoCode; }
	}
    
   Entity IntegerAutoCodeForEach
	{
		Integer Grouping;
		Integer CodeA {  AutoCode; }
		Integer CodeB {  AutoCodeForEach TestAutoCode.IntegerAutoCodeForEach.Grouping; }
	}
}

Module TestRequired
{
	Entity Simple
	{
		Integer Count { Required; }
		ShortString Name { Required; }
	}
}

Module TestLogging
{
	Entity Simple
	{
		Logging { AllProperties; }
		Integer Count;
		ShortString Name;
		DateTime Created;
	}
	
	Entity Complex
	{
		Logging
        {
            AllProperties;
            RelatedItem 'TestLogging.Simple' 'r2ID' 'SomeReference';
        }
		Binary bi;
		Bool bo;
		Date da;
		DateTime t;
		Decimal de;
		Guid g;
		Integer i;
		LongString ls;
		Money m;
		Reference r TestLogging.Simple { Detail; }
        Reference r2 TestLogging.Simple;
        Reference r3 TestLogging.Simple;
	}
    
    Entity Base
    {
        Logging { AllProperties; }
        ShortString Name;
    }
    
    Entity Extension
    {
        Logging { AllProperties; }
        Extends TestLogging.Base;
        ShortString Name;
    }
}

Module TestPessimisticLocking
{
	Entity Article
	{
		ShortString Name;
        Reference Parent TestPessimisticLocking.ArticleGroup { Detail; }
        PessimisticLocking;
	}
    
	Entity ArticleGroup
	{
		ShortString Name;
        PessimisticLocking;
	}
}

Module TestDatabaseExtensions
{
	Entity Simple
	{
		ShortString Name;
		Integer Code;
	}
}

Module TestAuditable
{
	Entity Parent
	{
		ShortString Name;
	}
	
	Entity Simple
	{
		ShortString Name;
		Reference Parent TestAuditable.Parent;
		DateTime Started { CreationTime; }
		DateTime ModifiedParentProperty { ModificationTimeOf TestAuditable.Simple.Parent; }
		DateTime ModifiedNameOrParentModification { ModificationTimeOf TestAuditable.Simple.Name; ModificationTimeOf TestAuditable.Simple.ModifiedParentProperty; }
	}
}

Module TestRange
{
    Entity SimpleRange
    {
        Decimal FromValue { Range TestRange.SimpleRange.ToValue; }
        Decimal ToValue;
    }
    
    Entity DateRangeWithoutDef 
    {
        DateRange FromDate ToDate;
    }
    
    Entity DateTimeRangeWithoutDef 
    {
        DateTimeRange FromDate ToDate;
    }
    
    Entity DateRangeWithRequired
    {
        Date FromDate { Required; }
        DateRange FromDate ToDate;
    }

    Entity IntegerRange
    {
        IntegerRange FromValue ToValue;
    }
}

Module TestLengthLimit
{
    Entity SimpleMaxLength
    {
        ShortString StringLessThan10Chars { MaxLength 10; }
        LongString LongStringLessThan10Chars { MaxLength 10; }
    }

    Entity SimpleMinLength 
    {
        LongString StringMoreThan2Chars { MinLength 3; }
    }
    
    Entity ExactlyLength
    {
        ShortString StringExactly5Chars { MinLength 5; MaxLength 5; }
    }
}

Module TestRegex
{
    Entity Simple 
    {      
        ShortString StringFrom200To249 { RegExMatch "2[0-4][0-9]" "StringFrom200To249 must be between 200 and 249."; }
        ShortString UnicodeTest { RegExMatch "čćČĆテスト" "UnicodeTest must match unicode regex."; }
        ShortString WhitespaceTest { RegExMatch "a\r\nb\tc" "WhitespaceTest must match whitespace regex."; }
        ShortString SpecialCharTest { RegExMatch "a\!\@\#\$\%\^\&\*\(\)_\+\-\=\[\]\\\{\}\|\;\'\:\""\,\.\/\<\>\?" "SpecialCharTest must match special character regex."; }
        ShortString DefaultErrorMessageTest { RegExMatch "123"; }
    }
    
    Entity SimpleRequired 
    {      
        ShortString StringFrom200To249 { Required; RegExMatch "2[0-4][0-9]" "Value must be between 200 and 249."; }
    }
}

Module TestMinValue
{
    Entity SimpleInteger
    {
        Integer Value { MinValue 2; }
    }
    
    Entity SimpleDecimal
    {
        Decimal Value { MinValue "2.34"; }
    }

    Entity SimpleMoney
    {
        Money Value { MinValue "2.34"; }
    }

    Entity SimpleDate
    {
        Date Value { MinValue "05.07.2013"; }
    }

    Entity SimpleDateTime
    {
        DateTime Value { MinValue "05.07.2013 12:34:00"; }
    }
}

Module TestMaxValue
{
    Entity SimpleInteger
    {
        Integer Value { MaxValue 2; }
    }
    
    Entity SimpleDecimal
    {
        Decimal Value { MaxValue "2.34"; }
    }

    Entity SimpleMoney
    {
        Money Value { MaxValue "2.34"; }
    }

    Entity SimpleDate
    {
        Date Value { MaxValue "05.07.2013"; }
    }

    Entity SimpleDateTime
    {
        DateTime Value { MaxValue "05.07.2013 12:34:00"; }
    }
}

Module TestDeactivatable
{
    Entity BasicEnt
    {
        Deactivatable;
        ShortString Name;
    }
}

Module TestSystemRequired
{
	Entity Parent
	{
		ShortString Name { SystemRequired; }
	}

    Entity Child
    {
        ShortString Name;
		Reference Parent TestSystemRequired.Parent { SystemRequired; }
    }
}

Module TestDenyUserEdit
{
    Entity Parent
    {
        ShortString Name { Required; }
    }
    
    Entity Simple
    {
        ShortString Editable;
        ShortString NonEditable { DenyUserEdit; }
        Reference NonEditableReference TestDenyUserEdit.Parent { DenyUserEdit; }
    }
    
    Entity Hardcoded
    {
        DenyUserEdit;
        ShortString Name;
    }
    
    Entity AutoInitialized
    {
        DateTime Start { CreationTime; DenyUserEdit; SystemRequired; }
    }
}

Module TestMultipleLock
{
    SqlQueryable SimpleChecks
    "
        SELECT
            ID,
            ContainsAlphabetic = CASE WHEN PatIndex('%[^a-z]%', Pass) > 0 THEN 1 ELSE 0 END,
            ContainsNumeric = CASE WHEN PatIndex('%[^0-9]%', Pass) > 0 THEN 1 ELSE 0 END,
            ContainsNonAlphaNumeric = CASE WHEN PatIndex('%[^a-z0-9]%', Pass) > 0 THEN 1 ELSE 0 END
        FROM
            TestMultipleLock.Simple
    "
    {
        Extends TestMultipleLock.Simple;
        SqlDependsOn TestMultipleLock.Simple;
        
        Bool ContainsAlphabetic;
        Bool ContainsNumeric;
        Bool ContainsNonAlphaNumeric;
    }

    Entity PassDependency
    {
        Integer MinPassLength;
    }
    
    Entity Simple
    {
        ShortString Pass;
        ShortString UserName;
        Reference PassDependency;
        
        ItemFilter PassValidation 'item => !repository.TestMultipleLock.SimpleChecks.Filter(new[]{item.ID}).SingleOrDefault().ContainsAlphabetic.Value || !repository.TestMultipleLock.SimpleChecks.Filter(new[]{item.ID}).SingleOrDefault().ContainsNumeric.Value || !repository.TestMultipleLock.SimpleChecks.Filter(new[]{item.ID}).SingleOrDefault().ContainsNonAlphaNumeric.Value';
        InvalidData PassValidation 'Pass is not valid.';

        ItemFilter PassContainsName 'item => item.Pass.Contains(item.UserName)';
        InvalidData PassContainsName 'Pass cannot contain UserName.';

        ItemFilter PassTooShort 'item => item.Pass.Length < item.PassDependency.MinPassLength';
        InvalidData PassTooShort 'Pass is too short.';
    }
}
