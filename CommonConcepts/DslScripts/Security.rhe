Module Common
{
	Entity Principal
	{
		ShortString Name { Required; Unique; }
		Logging { AllProperties; }
	}

	Entity Claim
	{
		Implements 'Rhetos.Security.IClaim, Rhetos.Security.Interfaces';
		
		ShortString ClaimResource { Required; }
		ShortString ClaimRight { Required; }
		Unique Common.Claim.ClaimResource Common.Claim.ClaimRight;
		Logging { AllProperties; }
	}
	
	Entity Permission
	{
		Reference Principal Common.Principal { Required; CascadeDelete; }
		Reference Claim Common.Claim { Required; CascadeDelete; }
		Unique Common.Permission.Principal Common.Permission.Claim;
		Bool IsAuthorized { Required; } // If IsAuthorized equals false then autorization is explicitly denied.
		Logging { AllProperties; }
	}
	
	//=====================================================
	// FILTERS AND HELPERS:
	
	Browse PermissionBrowse Common.Permission	
	{
		Implements 'Rhetos.Security.IPermission, Rhetos.Security.Interfaces';
		
		ShortString ClaimResource {From 'Claim.ClaimResource';}
		ShortString ClaimRight {From 'Claim.ClaimRight';}
		ShortString Principal {From 'Principal.Name';}
		Bool IsAuthorized {From IsAuthorized;}
	}
	
	QueryableExtension MyClaim Common.Claim '(IQueryable<Common.Claim> source, Common.DomRepository repository) =>
		{ throw new Rhetos.UserException("Reading Common.MyClaim without filter is not permitted. Use filter by Common.Claim or Common.Claim[]."); }'
	{
		Bool Applies;
		
		FilterBy 'Common.Claim' '(repository, parameter, executionContext) =>
			{
				var claim = repository.Common.Claim.Query().Where(item => item.ClaimResource == parameter.ClaimResource && item.ClaimRight == parameter.ClaimRight).SingleOrDefault();
				if (claim == null)
					throw new Rhetos.UserException("Claim " + parameter.ClaimResource + "-" + parameter.ClaimRight + " does not exist.");
				
				return repository.Common.MyClaim.Filter(new[] { claim });
			}'
		{
			UseExecutionContext;
		}
		
		FilterBy 'IEnumerable<Common.Claim>' '(repository, claims, executionContext) =>
			{
                var authorizations = executionContext.AuthorizationManager.GetAuthorizations(claims);
			
                return claims.Zip(authorizations, (claim, authorized) => new Common.MyClaim {
                        Base = claim,
                        Applies = authorized
                    }).ToArray();
             }'
		{
			UseExecutionContext;
		}
	}
}