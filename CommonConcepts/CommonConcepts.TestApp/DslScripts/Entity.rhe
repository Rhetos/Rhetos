Module TestEntity
{
	Entity Principal
	{
		ShortString Name;
	}
	
	Entity Claim
	{
		ShortString ClaimResource;
		ShortString ClaimRight;
	}
	
	Entity Permission
	{
		Reference Principal TestEntity.Principal { CascadeDelete; }
		Reference Claim TestEntity.Claim { CascadeDelete; }
		Bool IsAuthorized;
	}

	Entity BaseEntity
	{
		ShortString Name;
	}

	Entity Extension
	{
		Extends TestEntity.BaseEntity;
		ShortString Title;
	}
	
	Entity Child
	{
		ShortString Name;
		Reference Parent TestEntity.BaseEntity { Detail; }

		SaveMethod
		{
			Initialization LogDeletions
			'
				if (deletedIds.Any())
				{
					var names = this.Query(deletedIds.Select(d => d.ID)).Select(d => d.Name);
					var report = string.Join(", ", names.OrderBy(name => name)) + ".";
					_logProvider.GetLogger("Child.Deletions").Write(Rhetos.Logging.EventType.Info, () => report);
				}
			';
		}

		RepositoryUses _logProvider 'Rhetos.Logging.ILogProvider, Rhetos.Logging.Interfaces';
	}
	
	Browse ChildBrowse TestEntity.Child
	{
		ShortString Name { From 'Name'; }
		ShortString ParentName { From 'Parent.Name'; }
	}
    
    Entity Large
    {
        LongString Text;
    }
    
    Entity UniqueEntity
    {
        ShortString Name { Required; Unique; }
        ShortString Data;
    }
}
