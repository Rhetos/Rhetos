
Module TestSqlWorkarounds
{
    AutodetectSqlDependencies;
    
	SqlFunction Fun2 '@a INTEGER' 'RETURNS TABLE AS RETURN SELECT * FROM TestSqlWorkarounds.Fun1(@a)';
	SqlFunction Fun1 '@a INTEGER' 'RETURNS TABLE AS RETURN SELECT x = @a + 1';
	
	Entity E { Integer I; }
	
	SqlObject View3
		'CREATE VIEW TestSqlWorkarounds.V3 AS SELECT I1 AS X FROM V1 UNION ALL SELECT I2 FROM V2'
		'DROP VIEW TestSqlWorkarounds.V3'
	{
		SqlDependsOnSqlObject TestSqlWorkarounds.Views12;
	}
	
	SqlObject Views12
		'CREATE VIEW TestSqlWorkarounds.V1 AS SELECT ID, I+1 AS I1 FROM E
		{SPLIT SCRIPT}
		CREATE VIEW TestSqlWorkarounds.V2 AS SELECT ID, I+2 AS I2 FROM E'
		'DROP VIEW TestSqlWorkarounds.V1
		DROP VIEW TestSqlWorkarounds.V2'
	{
		SqlDependsOn TestSqlWorkarounds.E;
	}
	
	//=============================================
	
	Entity Person { ShortString Name; }
	
	SqlProcedure ComputePersonInfo
		"@NamePattern NVARCHAR(256), @LimitResultCount INT"
		"
			SELECT TOP (@LimitResultCount)
				p.ID, Name, NameLength = LEN(p.Name), PersonID = p.ID
			FROM
				TestSqlWorkarounds.Person p
			WHERE
				p.Name LIKE '%' + @NamePattern + '%'
			ORDER BY
				p.Name
		";
	
	Parameter PersonFilter
	{
		ShortString NamePattern;
		Integer LimitResultCount;
	}
	
	Computed PersonInfo 'repository => { throw new Rhetos.UserException("[Test] A filter \"TestSqlWorkarounds.PersonFilter\" must be used."); }'
	{
		ShortString Name;
		Integer NameLength;
		Reference Person TestSqlWorkarounds.Person; // Simpler alternative would be "Guid PersonID;"
		
		FilterBy PersonFilter
			'(repository, parameter) =>
			{
				// Always use parameters to prevent SQL injection.
				string sql = "EXEC TestSqlWorkarounds.ComputePersonInfo @p0, @p1";
				var sqlParams = new object[] { parameter.NamePattern, parameter.LimitResultCount };

				var result = _executionContext.EntityFrameworkContext.Database
					.SqlQuery<TestSqlWorkarounds.PersonInfo>(sql, sqlParams)
					.ToArray();
				return result;
			}';
	}

    Entity DependencyBase
    {
        Integer A;
        Integer B;
        UniqueMultiple 'B A';
    }
    
    SqlObject DependencyA "PRINT 'Create'" "PRINT 'Remove'"
    {
        SqlDependsOn TestSqlWorkarounds.DependencyBase.A;
    }
    
    SqlObject DependencyB "PRINT 'Create'" "PRINT 'Remove'"
    {
        SqlDependsOn TestSqlWorkarounds.DependencyBase.B;
    }
    
    SqlObject DependencyAll "PRINT 'Create'" "PRINT 'Remove'"
    {
        SqlDependsOn TestSqlWorkarounds.DependencyBase;
    }

    SqlObject DependencyID "PRINT 'Create'" "PRINT 'Remove'"
    {
        SqlDependsOnID TestSqlWorkarounds.DependencyBase;
    }
    
    Entity SqlUserError
    {
        SqlTrigger CustomUserMessage "AFTER INSERT" "RAISERROR ('custom user message', 16, 101)";
    }
    
    SqlView AutoDependsOn1 "SELECT * FROM TestSqlWorkarounds.AutoDependsOn2";
    SqlView AutoDependsOn1CI "SELECT * FROM TESTSQLWORKAROUNDS.AUTODEPENDSON2"; // Case insensitive
    SqlView AutoDependsOn2 "SELECT 'TestSqlWorkarounds.AutoDependsOn1'=1, * FROM /*TestSqlWorkarounds.AutoDependsOn1*/ --TestSqlWorkarounds.AutoDependsOn1
        [TestSqlWorkarounds].[AutoDependsOn3]"; // Circular reference is avoided because TestSqlWorkarounds.AutoDependsOn1 is commented out in AutoDependsOn2.
    SqlView AutoDependsOn3 "SELECT * FROM TestSqlWorkarounds.[AutoDependsOn4]";
    SqlView AutoDependsOn4 "SELECT a=1";
	
	Entity NoProperties;
	SqlView DependsOnNoProperties "SELECT A = 1;" { SqlDependsOn TestSqlWorkarounds.NoProperties; }

    Polymorphic Poly;
    Entity PolyImplementation { Is TestSqlWorkarounds.Poly; }
    SqlView AutoDependsOnPoly "SELECT ID FROM TestSqlWorkarounds.Poly";
	
	Entity TestIndex
	{
		ShortString A;
		ShortString B;
		SqlIndexMultiple 'A B' { Clustered; }
	}
	
	SqlObject WithTransaction
		"DECLARE @createView nvarchar(max);
			SET @createView = 'CREATE VIEW TestSqlWorkarounds.WithTransaction_' + CONVERT(NVARCHAR(max), @@TRANCOUNT) + ' AS SELECT a=1';
			EXEC (@createView);"
		"DECLARE @dropView nvarchar(max);
			SELECT @dropView = name FROM sys.objects o WHERE type = 'V' AND SCHEMA_NAME(schema_id) = 'TestSqlWorkarounds' AND name LIKE 'WithTransaction[_]%';
			SET @dropView = 'DROP VIEW TestSqlWorkarounds.' + @dropView;
			EXEC (@dropView);";
	
	SqlObject WithoutTransaction
		"/*DatabaseGenerator:NoTransaction*/DECLARE @createView nvarchar(max);
			SET @createView = 'CREATE VIEW TestSqlWorkarounds.WithoutTransaction_' + CONVERT(NVARCHAR(max), @@TRANCOUNT) + ' AS SELECT a=1';
			EXEC (@createView);"
		"/*DatabaseGenerator:NoTransaction*/DECLARE @dropView nvarchar(max);
			SELECT @dropView = name FROM sys.objects o WHERE type = 'V' AND SCHEMA_NAME(schema_id) = 'TestSqlWorkarounds' AND name LIKE 'WithoutTransaction[_]%';
			SET @dropView = 'DROP VIEW TestSqlWorkarounds.' + @dropView;
			EXEC (@dropView);";


	SqlObject WithTransactionBase
		"CREATE VIEW TestSqlWorkarounds.WithTransactionBase AS SELECT a=1"
		"DROP VIEW TestSqlWorkarounds.WithTransactionBase";

	SqlObject WithoutTransactionBase
		"/*DatabaseGenerator:NoTransaction*/ CREATE VIEW TestSqlWorkarounds.WithoutTransactionBase AS SELECT a=1"
		"/*DatabaseGenerator:NoTransaction*/ DROP VIEW TestSqlWorkarounds.WithoutTransactionBase";

	SqlObject WithoutTransactionBaseDependentOnWith
		"/*DatabaseGenerator:NoTransaction*/ CREATE VIEW TestSqlWorkarounds.WithoutTransactionBaseDependentOnWith AS SELECT * FROM TestSqlWorkarounds.WithTransactionBase"
		"/*DatabaseGenerator:NoTransaction*/ DROP VIEW TestSqlWorkarounds.WithoutTransactionBaseDependentOnWith"
	{
		SqlDependsOnSqlObject TestSqlWorkarounds.WithTransactionBase;
	}

	SqlObject WithoutTransactionBaseDependentOnWithout
		"/*DatabaseGenerator:NoTransaction*/ CREATE VIEW TestSqlWorkarounds.WithoutTransactionBaseDependentOnWithout AS SELECT * FROM TestSqlWorkarounds.WithoutTransactionBase"
		"/*DatabaseGenerator:NoTransaction*/ DROP VIEW TestSqlWorkarounds.WithoutTransactionBaseDependentOnWithout"
	{
		SqlDependsOnSqlObject TestSqlWorkarounds.WithoutTransactionBase;
	}

	SqlObject WithTransactionBaseDependentOnWithout
		"CREATE VIEW TestSqlWorkarounds.WithTransactionBaseDependentOnWithout AS SELECT * FROM TestSqlWorkarounds.WithoutTransactionBase"
		"DROP VIEW TestSqlWorkarounds.WithTransactionBaseDependentOnWithout"
	{
		SqlDependsOnSqlObject TestSqlWorkarounds.WithoutTransactionBase;
	}

	SqlObject DependsOnIndex 'PRINT 1' 'PRINT 2'
	{
		SqlDependsOnIndex TestSqlWorkarounds.TestIndex.'A B';
	}

	Entity RedundantIndexDefinitions1
	{
		// This is just a deploy-time test. The deployment would fail if there is a conflict between multiple index definitions.
		SqlIndexMultiple 'Code' { Clustered; }
		ShortString Code { AutoCode; SqlIndex; Unique; }
	}

	Entity RedundantIndexDefinitions2
	{
		// This is just a deploy-time test. The deployment would fail if there is a conflict between multiple index definitions.
		SqlIndexMultiple 'TestIndex' { Clustered; }
		Reference TestIndex { Unique; SqlIndex; Detail; }
	}
}

Module TestSqlWorkarounds2
{
	SqlView OtherModuleObject "SELECT A = 1;"
	{
		SqlDependsOn TestSqlWorkarounds;
	}
}

Module TestSqlWorkarounds
{
	Entity HasNotNullProperty
	{
		ShortString Name { SqlNotNull "'abc'"; }
		Integer Code { SqlNotNull "-123"; }
	}
}

Module TestLongIdentifiers
{
    Entity LongIdentifier0000020000000003000000000400000000050000000006000000000700000000080000000009000000000C
    {
        ShortString LongName0100000000020000000003000000000400000000050000000006000000000700000000080000000009000000000C { Unique; }
    }

    Entity LongChild100000000020000000003000000000400000000050000000006000000000700000000080000000009000000000C
    {
        Reference LongIdentifier0000020000000003000000000400000000050000000006000000000700000000080000000009000000000C;
        ShortString ChildName;
    }

    Browse LongBrowse00000000020000000003000000000400000000050000000006000000000700000000080000000009000000000C
        TestLongIdentifiers.LongChild100000000020000000003000000000400000000050000000006000000000700000000080000000009000000000C
    {
        Take ChildName;
        Take ParentName 'LongIdentifier0000020000000003000000000400000000050000000006000000000700000000080000000009000000000C.LongName0100000000020000000003000000000400000000050000000006000000000700000000080000000009000000000C';
    }
}
