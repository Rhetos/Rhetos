Module TestRowPermissions
{
    Entity NoRP
    {
        Integer value;
        ItemFilter Value30 'item => item.value > 30';
    }
    
    Entity SimpleRP
    {
        Integer value;
        RowPermissionsRead '(source, repo, context) => item => (item.value >= 1500) && (item.value <= 2500)';
        RowPermissionsWrite '(source, repo, context) => item => (item.value >= 500) && (item.value <= 3500)';
        ItemFilter Value30 'item => item.value > 30';
    }
        
    Entity ComplexRP
    {
        Integer value;
        ItemFilter Value10 'item => item.value > 10';

        RowPermissions
            '(source, repos, context) =>
            {
                var perms = repos.TestRowPermissions.ComplexRPPermissions.Query().Where(a => a.userName == context.UserInfo.UserName).ToList().SingleOrDefault();
                if (perms == null) return item => false;
                
                return item => (item.value >= perms.minVal) && (item.value <= perms.maxVal);
            }';
    }
    
    Entity ComplexRPPermissions
    {
        ShortString userName;
        Integer minVal;
        Integer maxVal;
    }
    
    Browse SimpleRPBrowse TestRowPermissions.SimpleRP
    {
        Take Value2 value;
        RowPermissionsRead '(source, repo, context) => item => (item.Base.value >= 1500) && (item.Base.value <= 2500)';
    }
    
    Entity AutoFilter
    {
        ShortString Name;
        RowPermissionsRead '(source, repository, context) =>
            {
                repository.Common.AddToLog.Execute(new Common.AddToLog {
                    TableName = "TestRowPermissions.AutoFilter",
                    Action = "RowPermissionsReadItems filter" });
                
                return item => item.Name.StartsWith("a");
            }';
        ApplyFilterOnClientRead 'Common.RowPermissionsReadItems';
    }

    Entity ErrorData
    {
        ShortString Name;
        
        RowPermissionsRead '(source, repos, context) =>
            {
                return item => true;
            }';
        
        FilterBy 'System.String' '(repository, parameter) =>
            {
                var items = repository.TestRowPermissions.ErrorData.Load().OrderBy(item => item.Name).ToArray();
                if (parameter == "duplicateSecondItem")
                    return items.Concat(new[] { items[1] }).ToArray();
                return items;
            }';
    }

    Entity EntityWithDuplicateIdFilter
    {
        Reference DuplicateIdView;
        Guid TestRun;
        RowPermissions '(source, repos, context) =>
            {
                return item => item.DuplicateIdView.ValidPermissions > 0;
            }';
    }

    SqlQueryable DuplicateIdView
        "
            SELECT ID = CAST('11111111-c757-4757-9850-231c800393a7' AS uniqueidentifier), ValidPermissions = 2
            UNION ALL
            SELECT ID = CAST('11111111-c757-4757-9850-231c800393a7' AS uniqueidentifier), ValidPermissions = 3
            UNION ALL
            SELECT ID = CAST('11111111-c757-4757-9850-231c800393a7' AS uniqueidentifier), ValidPermissions = 4
            UNION ALL
            SELECT ID = CAST('22222222-c757-4757-9850-231c800393a7' AS uniqueidentifier), ValidPermissions = 0
        "
    {
        Integer ValidPermissions;
    }
    
    //===============================================================

    Entity RPRulesGroup { ShortString Name; }
    Entity RPRulesItem { ShortString Name; Reference Group TestRowPermissions.RPRulesGroup { Detail; } }
    
    Entity RpRulesAllowItem { ShortString UserName; Reference Item TestRowPermissions.RPRulesItem { Detail; } }
    Entity RpRulesAllowGroup { ShortString UserName; Reference Group TestRowPermissions.RPRulesGroup { Detail; } }
    Entity RpRulesDenyItem { ShortString UserName; Reference Item TestRowPermissions.RPRulesItem { Detail; } }
    
    Entity RPRulesItem
    {
        RowPermissions
        {
            AllowRead DirectlyAlllowedItems 'context =>
                {
                    var DirectlyAlllowedItems = context.Repository.TestRowPermissions.RpRulesAllowItem.Query(rule => rule.UserName == context.UserInfo.UserName).Select(rule => rule.ItemID.Value).ToList();
                    if (DirectlyAlllowedItems.Count == 0)
                        return item => false;
                    return item => DirectlyAlllowedItems.Contains(item.ID);
                }';

            AllowRead DirectlyAlllowedGroups 'context =>
                {
                    var DirectlyAlllowedGroups = context.Repository.TestRowPermissions.RpRulesAllowGroup.Query(rule => rule.UserName == context.UserInfo.UserName).Select(rule => rule.Group.ID).ToList();
                    if (DirectlyAlllowedGroups.Count == 0)
                        return item => false;
                    return item => DirectlyAlllowedGroups.Contains(item.Group.ID);
                }';
            
            AllowRead AllowedAllGroups 'context =>
                {
                    int totalGroupsCount = context.Repository.TestRowPermissions.RPRulesGroup.Query().Count();
                    int allowedGroupsCount = context.Repository.TestRowPermissions.RpRulesAllowGroup.Query(rule => rule.UserName == context.UserInfo.UserName).Select(rule => rule.Group.ID).Distinct().Count();
                    if (allowedGroupsCount == totalGroupsCount)
                        return item => true; // This specific filter will be optimized. If it is active, there is no need to check other rules when querying RPRulesItem.
                    else
                        return item => false;
                }';
            
            DenyRead DirectlyDeniedItems 'context =>
                {
                    var DirectlyDeniedItems = context.Repository.TestRowPermissions.RpRulesDenyItem.Query(rule => rule.UserName == context.UserInfo.UserName).Select(rule => rule.Item.ID).ToList();
                    if (DirectlyDeniedItems.Count == 0)
                        return item => false;
                    return item => DirectlyDeniedItems.Contains(item.ID);
                }';
        }
    }
    
    //===============================================================
    // Combined read and write rules:
    
    Entity RPCombinedRulesSettings
    {
        ShortString Settings;
    }
    
    Entity RPCombinedRulesItems
    {
        ShortString Name;
        
        RowPermissions
        {
            Allow a 'context => { var a = context.Repository.TestRowPermissions.RPCombinedRulesSettings.Query().Select(s => s.Settings).SingleOrDefault();
                return item => item.Name.Contains("a"); }';
            
            Allow bConditional 'context => { var bConditional  = context.Repository.TestRowPermissions.RPCombinedRulesSettings.Query().Select(s => s.Settings).SingleOrDefault();
                if (bConditional != "add conditional rules") return item => false;
                return item => item.Name.Contains("b"); }';

            Deny no1 'context => { var no1 = context.Repository.TestRowPermissions.RPCombinedRulesSettings.Query().Select(s => s.Settings).SingleOrDefault();
                return item => item.Name.Contains("1"); }';
            
            Deny no2Conditional  'context => { var no2Conditional = context.Repository.TestRowPermissions.RPCombinedRulesSettings.Query().Select(s => s.Settings).SingleOrDefault();
                if (no2Conditional != "add conditional rules") return item => false;
                return item => item.Name.Contains("2"); }';
                
            AllowRead r 'context => item => item.Name.Contains("r")';
            
            AllowWrite w 'context => item => item.Name.Contains("w")';
        }
    }
    
    //===============================================================
    
    Entity Level1
    {
        Integer value;
        RowPermissionsRead '(source, repo, context) => item => item.value > 100 && item.value < 200';
        RowPermissionsWrite '(source, repo, context) => item => item.value > 50 && item.value < 150';
    }
    
    Entity Level2
    {
        Integer value;
        Reference MyParent TestRowPermissions.Level1;
        RowPermissions
        {
            InheritFrom TestRowPermissions.Level2.MyParent;
            DenyRead Denied 'context => item => new List<int?>() { 1, 2, 3 }.Contains(item.value)';
        }
    }
    
    Entity Level3
    {
        Reference MyParent TestRowPermissions.Level2;
        RowPermissions
        {
            InheritFrom TestRowPermissions.Level3.MyParent;
        }
    }

    Browse Level1Browse TestRowPermissions.Level1
    {
        Take Value2 value;
        RowPermissions { InheritFromBase; }
    }
    

    // we test only write specific functionality, rules specific functionality is tested together with read rules
    Entity RPWriteRulesEmpty
    {
        RowPermissions
        {
            AllowRead AllowAll 'context => item => true';
        }
    }
    
    Entity RPWriteRules
    {
        Integer value;
        RowPermissions
        {
            AllowWrite AllowNoCondition 'context => item => new List<int?>() { 1, 2, 3, 4, 5, 6, 7, 8, 9 }.Contains(item.value)';
                
            AllowWrite AllowCondition 'context => item => false';
                
            DenyWrite DenyCondition 'context => item => item.value == 5';
                
            DenyWrite DenyNoCondition 'context => item => new List<int?>() { 7, 8 }.Contains(item.value)';

            AllowWrite AllowConditionTrue 'context => item => item.value == 20';
        }
    }
}

Module TestRowPermissions1
{
    AutoInheritRowPermissions;
    
    Entity E1
    {
        ShortString Name1;
        Reference E2 TestRowPermissions2.E2 { Detail; }
        // Allowed: E3.Name3="3" OR E2.Name2=="2" OR E1.Name1=="1".
        RowPermissions { AllowRead Allow1 'context => item => item.Name1 == "1"'; }
    }

    Browse E1Browse TestRowPermissions1.E1
    {
        // Allowed: E3.Name3="3" OR E2.Name2=="2" OR E1.Name1=="1".
        Take Name1Browse 'Name1';
    }
    
    Browse E1BrowseRP TestRowPermissions1.E1
    {
        Take Name1Browse 'Name1';
        // Allowed: E3.Name3="3" OR E2.Name2=="2" OR E1.Name1=="1" OR E1BrowseRP.Name1Browse=="1B".
        RowPermissions { AllowRead Allow1Browse 'context => item => item.Name1Browse == "1b"'; }
    }
}

Module TestRowPermissions2
{
    AutoInheritRowPermissions;
    
    Entity E2
    {
        ShortString Name2;
        Reference E3 TestRowPermissions3.E3 { Detail; }
        // Allowed: E3.Name3="3" OR E2.Name2=="2".
        RowPermissions { AllowRead Allow2 'context => item => item.Name2 == "2"'; }
    }
}

Module TestRowPermissions3
{
    Entity E3
    {
        ShortString Name3;
        Reference E4 TestRowPermissions4.E4 { Detail; }
        // Doesn't inherit row permissions from parent since there is no AutoInheritRowPermissions.
        // Inheriting the row permissions would fail because this entity doesn't use "RowPermissions" rules.
        RowPermissionsRead '(source, repo, context) => item => item.Name3 == "3"';
    }
}

Module TestRowPermissions4
{
    Entity E4
    {
        ShortString Name4;
        RowPermissionsRead '(source, repo, context) => item => item.Name4 == "4"';
    }
}

Module TestRowPermissionsExternal
{
    Entity SimpleParent
    {
        ShortString Name;
        RowPermissionsRead '(source, repo, context) => item => item.Name == "p"';
    }

    Entity SimpleBase
    {
        ShortString Name;
        RowPermissionsRead '(source, repo, context) => item => item.Name == "b"';
    }
}

Module TestRowPermissionsInheritFull
{
    AutoInheritRowPermissions;
    
    Entity SimpleDetail
    {
        ShortString Name;
        Reference Parent TestRowPermissionsExternal.SimpleParent { Detail; }
        RowPermissions { AllowRead AllowMore 'context => item => item.Name == "d"'; }
    }

    Entity ExtensionComplex
    {
        Extends TestRowPermissionsExternal.SimpleBase;
        ShortString Name;
        Reference SimpleDetail { Detail; }
        RowPermissions { AllowRead AllowMore 'context => item => item.Name == "ec"'; }
    }
}

Module TestRowPermissionsInheritToQuery
{
    AutoInheritRowPermissions;
    AutodetectSqlDependencies;
    
    Entity Simple
    {
        ShortString Name;
        Guid GroupID;
        RowPermissions { AllowRead AllowMore 'context => item => item.Name.StartsWith("a")'; }
    }

    SqlQueryable DetailQuery
        "
            SELECT
                ID = NEWID(), 
                SimpleID = s.ID,
                Info = Name + num.x
            FROM
                TestRowPermissionsInheritToQuery.Simple s
                CROSS JOIN (SELECT x='1' UNION ALL SELECT x='2') num
        "
    {
        Reference Simple { Detail; }
        ShortString Info;
    }
}


Module TestRowPermissionsInheritInternally
{
    AutoInheritRowPermissionsInternally;
    
    Entity SimpleDetail
    {
        ShortString Name;
        Reference Parent TestRowPermissionsExternal.SimpleParent { Detail; }
        RowPermissions { AllowRead AllowMore 'context => item => item.Name == "d"'; }
    }

    Entity ExtensionComplex
    {
        Extends TestRowPermissionsExternal.SimpleBase;
        ShortString Name;
        Reference SimpleDetail { Detail; }
        RowPermissions { AllowRead AllowMore 'context => item => item.Name == "ec"'; }
    }
}

Module TestRowPermissions
{
    Entity OptimizeBase
    {
        ShortString NameB;
        RowPermissions { Allow Ext 'context => item => item.Extension_OptimizeExtension.NameE.Contains("allow")'; }
    }

    Entity OptimizeExtension
    {
        Extends TestRowPermissions.OptimizeBase;
        ShortString NameE;
        RowPermissions { InheritFromBase; }
    }
}

Module TestRowPermissions5
{
    AutoInheritRowPermissions;

    Entity Employee
    {
        ShortString Name;
        Reference Supervisor TestRowPermissions5.Employee { Detail; }

        RowPermissions
        {
            Allow Access1 'context => item => item.Name == "Jane" || item.Supervisor.Name == "Jane"';
            Allow Access2 'context => item => item.Name == "John" || item.Supervisor.Name == "John"';
        }
    }

    Browse EmployeeBrowse TestRowPermissions5.Employee
    {
        Take 'Name';
        Take 'Supervisor.Name';
    }
}
