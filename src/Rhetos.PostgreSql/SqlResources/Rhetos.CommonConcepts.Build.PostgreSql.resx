<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="UniqueReferenceDatabaseDefinition_ConstraintName" xml:space="preserve">
    <value>FK_{0}_{1}_ID</value>
  </data>
  <data name="UniqueReferenceDatabaseDefinition_Create" xml:space="preserve">
    <value>ALTER TABLE {0} ADD CONSTRAINT {1} FOREIGN KEY (ID) REFERENCES {2} (ID) {3};</value>
  </data>
  <data name="UniqueReferenceDatabaseDefinition_Remove" xml:space="preserve">
    <value>ALTER TABLE {0} DROP CONSTRAINT {1};</value>
  </data>
  <data name="EntityDatabaseDefinition_Create" xml:space="preserve">
    <value>CREATE TABLE {0}.{1} (ID uuid NOT NULL CONSTRAINT {2} PRIMARY KEY CONSTRAINT {3} DEFAULT gen_random_uuid());
CALL Rhetos.DataMigrationApply('{0}', '{1}', 'ID');</value>
  </data>
  <data name="EntityDatabaseDefinition_Remove" xml:space="preserve">
    <value>CALL Rhetos.DataMigrationUse('{0}', '{1}', 'ID', NULL);
DROP TABLE {0}.{1};</value>
  </data>
  <data name="EntityLoggingDefinition_Create" xml:space="preserve">
    <value>CREATE FUNCTION {0}.{1}_Logging()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN

CREATE TEMPORARY TABLE IF NOT EXISTS temp_log
(
    ID uuid NOT NULL,
    Action varchar(256),
    TableName varchar(256),
    ItemId uuid,
    Description text{7}
);

IF (TG_OP = 'DELETE') THEN
    INSERT INTO temp_log (ID, Action, TableName, ItemId, Description{8})
        SELECT gen_random_uuid(), 'Delete', '{0}.{1}', deleted.ID,
            xmlserialize(CONTENT xmlelement(NAME "PREVIOUS",
                xmlforest(null AS null_ignored{12})) AS text){9}
        FROM deleted
            LEFT JOIN (SELECT * FROM deleted WHERE 1=0) AS inserted{10} ON deleted.ID = inserted.ID;

ELSIF (TG_OP = 'UPDATE') THEN
    INSERT INTO temp_log (ID, Action, TableName, ItemId, Description{8})
        SELECT gen_random_uuid(), 'Update', '{0}.{1}', deleted.ID,
            xmlserialize(CONTENT xmlelement(NAME "PREVIOUS",
                xmlforest(null AS null_ignored{6}
                    )) AS text){9}
        FROM inserted
            FULL OUTER JOIN deleted ON inserted.ID = deleted.ID{10};

ELSIF (TG_OP = 'INSERT') THEN
    INSERT INTO temp_log (ID, Action, TableName, ItemId, Description{8})
        SELECT gen_random_uuid(), 'Insert', '{0}.{1}', inserted.ID, null{9}
        FROM inserted
            LEFT JOIN (SELECT * FROM inserted WHERE 1=0) AS deleted{10} ON deleted.ID = inserted.ID;

ELSE
    RAISE EXCEPTION 'Logging trigger on {0}.{1}: Unexpected operation type "%".', TG_OP;

END IF;

INSERT INTO {0}.Log (ID, Action, TableName, ItemId, Description)
SELECT ID, Action, TableName, ItemId, Description
FROM temp_log;

{11}
DROP TABLE temp_log;

RETURN NULL;
END
$$;

CREATE TRIGGER {2}
    AFTER INSERT ON {0}.{1}
    REFERENCING NEW TABLE AS inserted
    FOR EACH STATEMENT
    EXECUTE FUNCTION {0}.{1}_Logging();

CREATE TRIGGER {3}
    AFTER UPDATE ON {0}.{1}
    REFERENCING OLD TABLE AS deleted NEW TABLE AS inserted
    FOR EACH STATEMENT
    EXECUTE FUNCTION {0}.{1}_Logging();

CREATE TRIGGER {4}
    AFTER DELETE ON {0}.{1}
    REFERENCING OLD TABLE AS deleted
    FOR EACH STATEMENT
    EXECUTE FUNCTION {0}.{1}_Logging();</value>
  </data>
  <data name="EntityLoggingDefinition_Remove" xml:space="preserve">
    <value>DROP TRIGGER {2} ON {0}.{1};
DROP TRIGGER {3} ON {0}.{1};
DROP TRIGGER {4} ON {0}.{1};
DROP FUNCTION {0}.{1}_Logging;</value>
  </data>
  <data name="EntityLoggingDefinition_TriggerNameInsert" xml:space="preserve">
    <value>trg_{1}_logging_insert</value>
  </data>
  <data name="EntityLoggingDefinition_TriggerNameDelete" xml:space="preserve">
    <value>trg_{1}_logging_update</value>
  </data>
  <data name="EntityLoggingDefinition_TriggerNameUpdate" xml:space="preserve">
    <value>trg_{1}_logging_delete</value>
  </data>
  <data name="LegacyEntityWithAutoCreatedViewDatabaseDefinition_InsertTriggerName" xml:space="preserve">
    <value>trg_{0}_LegacyInsert</value>
  </data>
  <data name="LegacyEntityWithAutoCreatedViewDatabaseDefinition_UpdateTriggerName" xml:space="preserve">
    <value>trg_{0}_LegacyUpdate</value>
  </data>
  <data name="LegacyEntityWithAutoCreatedViewDatabaseDefinition_DeleteTriggerName" xml:space="preserve">
    <value>trg_{0}_LegacyDelete</value>
  </data>
  <data name="LegacyEntityWithAutoCreatedViewDatabaseDefinition_Create" xml:space="preserve">
    <value>CREATE VIEW {0}.{1} WITH VIEW_METADATA AS
SELECT
    source.ID{7}
FROM
    {3} source
{8};

{2}

CREATE TRIGGER {0}.{4}
ON {0}.{1} INSTEAD OF INSERT
AS
IF NOT EXISTS(SELECT * FROM inserted) RETURN;
SET NOCOUNT ON;

INSERT INTO
    {3} (ID{9})
SELECT
    inserted.ID{10}
FROM
    inserted
{12};

{2}

CREATE TRIGGER {0}.{5}
ON {0}.{1} INSTEAD OF UPDATE
AS
IF NOT EXISTS(SELECT * FROM inserted) RETURN;
SET NOCOUNT ON;

DECLARE dummy INT

UPDATE
    {3} source
SET
    dummy = 0{11}
FROM
    inserted
{12}
WHERE
    inserted.ID = source.ID;

{2}

CREATE TRIGGER {0}.{6}
ON {0}.{1} INSTEAD OF DELETE
AS
IF NOT EXISTS(SELECT * FROM deleted) RETURN;
SET NOCOUNT ON;

DELETE FROM {3} WHERE ID IN (SELECT ID FROM deleted);</value>
  </data>
  <data name="LegacyEntityWithAutoCreatedViewDatabaseDefinition_Remove" xml:space="preserve">
    <value>DROP TRIGGER {0}.{4};
DROP TRIGGER {0}.{3};
DROP TRIGGER {0}.{2};
DROP VIEW {0}.{1};</value>
  </data>
  <data name="LegacyPropertyReadOnlyDatabaseDefinition_ViewSelect" xml:space="preserve">
    <value>,
    {0} = source.{1}</value>
  </data>
  <data name="LegacyPropertyReferenceDatabaseDefinition_ExtendViewSelect" xml:space="preserve">
    <value>,
    {0}ID = {1}.ID</value>
  </data>
  <data name="LegacyPropertyReferenceDatabaseDefinition_ExtendViewFrom" xml:space="preserve">
    <value>    LEFT JOIN {0} {1} ON {2}
</value>
  </data>
  <data name="LegacyPropertyReferenceDatabaseDefinition_ExtendFromJoin" xml:space="preserve">
    <value>{0}.{1} = source.{2}</value>
  </data>
  <data name="LegacyPropertyReferenceDatabaseDefinition_ExtendTriggerInsert" xml:space="preserve">
    <value>, {0}</value>
  </data>
  <data name="LegacyPropertyReferenceDatabaseDefinition_ExtendTriggerSelectForInsert" xml:space="preserve">
    <value>,
    {0} = {1}.{2}</value>
  </data>
  <data name="LegacyPropertyReferenceDatabaseDefinition_ExtendTriggerFrom" xml:space="preserve">
    <value>    LEFT JOIN {0} {1} ON {1}.ID = inserted.{2}ID
</value>
  </data>
  <data name="LegacyPropertySimpleDatabaseDefinition_ExtendViewSelect" xml:space="preserve">
    <value>,
    {0} = source.{1}</value>
  </data>
  <data name="LegacyPropertySimpleDatabaseDefinition_ExtendTriggerInsert" xml:space="preserve">
    <value>, {0}</value>
  </data>
  <data name="LegacyPropertySimpleDatabaseDefinition_ExtendTriggerSelectForInsert" xml:space="preserve">
    <value>,
    {0} = inserted.{1}</value>
  </data>
  <data name="ModuleDatabaseDefinition_Create" xml:space="preserve">
    <value>CREATE SCHEMA {0}</value>
  </data>
  <data name="ModuleDatabaseDefinition_Remove" xml:space="preserve">
    <value>DROP SCHEMA {0}</value>
  </data>
  <data name="ModuleAuthorization_Create" xml:space="preserve">
    <value>ALTER SCHEMA {0} OWNER TO pg_database_owner</value>
  </data>
  <data name="PropertyLoggingDefinition_GenericPropertyLogging" xml:space="preserve">
    <value>,
                    CASE WHEN inserted.{0} IS DISTINCT FROM deleted.{0} THEN deleted.{0} END AS {0}</value>
  </data>
  <data name="PropertyLoggingDefinition_GenericPropertyDeletedLogging" xml:space="preserve">
    <value>, deleted.{0}</value>
  </data>
  <data name="PropertyLoggingDefinition_TextValue" xml:space="preserve">
    <value>deleted.{0}</value>
  </data>
  <data name="ReferenceCascadeDeleteDatabaseDefinition_ExtendForeignKey" xml:space="preserve">
    <value> ON DELETE CASCADE </value>
  </data>
  <data name="ReferencePropertyConstraintDatabaseDefinition_Create" xml:space="preserve">
    <value>ALTER TABLE {0} ADD CONSTRAINT {1} FOREIGN KEY ({2}) REFERENCES {3} (ID) {4}</value>
  </data>
  <data name="ReferencePropertyConstraintDatabaseDefinition_Remove" xml:space="preserve">
    <value>ALTER TABLE {0} DROP CONSTRAINT {1}</value>
  </data>
  <data name="ReferencePropertyConstraintDatabaseDefinition_ConstraintName" xml:space="preserve">
    <value>FK_{0}_{1}_{2}ID</value>
  </data>
  <data name="ReferencePropertyDatabaseDefinition_DataType" xml:space="preserve">
    <value>uuid</value>
  </data>
  <data name="SqlDefaultPropertyDatabaseDefinition_Create" xml:space="preserve">
    <value>ALTER TABLE {0}.{1} ALTER {2} SET DEFAULT {4}</value>
  </data>
  <data name="SqlDefaultPropertyDatabaseDefinition_Remove" xml:space="preserve">
    <value>ALTER TABLE {0}.{1} ALTER {2} DROP DEFAULT</value>
  </data>
  <data name="SqlDefaultPropertyDatabaseDefinition_ConstraintName" xml:space="preserve">
    <value>DF_{0}_{1}</value>
  </data>
  <data name="SqlFunctionDatabaseDefinition_Create" xml:space="preserve">
    <value>
CREATE FUNCTION {0}.{1} ({2})
{3}
</value>
  </data>
  <data name="SqlFunctionDatabaseDefinition_Remove" xml:space="preserve">
    <value>DROP FUNCTION {0}.{1}</value>
  </data>
  <data name="SqlIndexClusteredDatabaseDefinition_Create" xml:space="preserve">
    <value>ALTER TABLE {0}.{1} CLUSTER ON {2}</value>
  </data>
  <data name="SqlIndexClusteredDatabaseDefinition_Remove" xml:space="preserve">
    <value>ALTER TABLE {0}.{1} SET WITHOUT CLUSTER</value>
  </data>
  <data name="SqlIndexMultipleDatabaseDefinition_Create" xml:space="preserve">
    <value>CREATE {4} {5} INDEX {0} ON {1}.{2} ({3}) {6} {7} {8}</value>
  </data>
  <data name="SqlIndexMultipleDatabaseDefinition_Remove" xml:space="preserve">
    <value>DROP INDEX {0}.{2}</value>
  </data>
  <data name="SqlIndexMultipleDatabaseDefinition_ConstraintName" xml:space="preserve">
    <value>IX_{0}_{1}</value>
  </data>
  <data name="SqlProcedureDatabaseDefinition_Create" xml:space="preserve">
    <value>CREATE PROCEDURE {0}.{1} ({2}
)
{3}
</value>
  </data>
  <data name="SqlProcedureDatabaseDefinition_Remove" xml:space="preserve">
    <value>DROP PROCEDURE {0}.{1}</value>
  </data>
  <data name="SqlQueryableDatabaseDefinition_Create" xml:space="preserve">
    <value>CREATE VIEW {0}.{1} AS {2}</value>
  </data>
  <data name="SqlQueryableDatabaseDefinition_Remove" xml:space="preserve">
    <value>DROP VIEW {0}.{1}</value>
  </data>
  <data name="SqlTriggerDatabaseDefinition_Create" xml:space="preserve">
    <value>CREATE TRIGGER {0}.{1}
ON {0}.{2} {3}
AS
SET NOCOUNT ON
IF (NOT EXISTS(SELECT * FROM inserted)) AND (NOT EXISTS(SELECT * FROM deleted)) RETURN;
{4}</value>
  </data>
  <data name="SqlTriggerDatabaseDefinition_Remove" xml:space="preserve">
    <value>DROP TRIGGER {0}.{1}</value>
  </data>
  <data name="SqlTriggerDatabaseDefinition_TriggerName" xml:space="preserve">
    <value>trg_{0}_{1}</value>
  </data>
  <data name="SqlUniqueMultipleDatabaseDefinition_ExtendOption1" xml:space="preserve">
    <value>UNIQUE </value>
  </data>
  <data name="SqlViewDatabaseDefinition_Create" xml:space="preserve">
    <value>CREATE VIEW {0}.{1}
AS
{2}
</value>
  </data>
  <data name="SqlViewDatabaseDefinition_Remove" xml:space="preserve">
    <value>DROP VIEW {0}.{1}</value>
  </data>
  <data name="BinaryPropertyDatabaseDefinition_DataType" xml:space="preserve">
    <value>bytea</value>
  </data>
  <data name="BoolPropertyDatabaseDefinition_DataType" xml:space="preserve">
    <value>boolean</value>
  </data>
  <data name="DatePropertyDatabaseDefinition_DataType" xml:space="preserve">
    <value>date</value>
  </data>
  <data name="DateTimePropertyDatabaseDefinition_DataType_Legacy" xml:space="preserve">
    <value>timestamp(3)</value>
  </data>
  <data name="DateTimePropertyDatabaseDefinition_DataType" xml:space="preserve">
    <value>timestamp({0})</value>
  </data>
  <data name="DecimalPropertyDatabaseDefinition_DataType" xml:space="preserve">
    <value>numeric(28,10)</value>
  </data>
  <data name="GuidPropertyDatabaseDefinition_DataType" xml:space="preserve">
    <value>uuid</value>
  </data>
  <data name="IntegerPropertyDatabaseDefinition_DataType" xml:space="preserve">
    <value>integer</value>
  </data>
  <data name="LongStringPropertyDatabaseDefinition_DataType" xml:space="preserve">
    <value>text</value>
  </data>
  <data name="MoneyPropertyDatabaseDefinition_DataType" xml:space="preserve">
    <value>money</value>
  </data>
  <data name="ShortStringPropertyDatabaseDefinition_DataType" xml:space="preserve">
    <value>varchar({0})</value>
  </data>
  <data name="PropertyDatabaseDefinition_AddColumn" xml:space="preserve">
    <value>
ALTER TABLE {0}.{1} ADD {2} {3} {4} {5} {6};
CALL Rhetos.DataMigrationApply('{0}', '{1}', '{2}');
{7}
    </value>
  </data>
  <data name="PropertyDatabaseDefinition_RemoveColumn" xml:space="preserve">
    <value>
{3}
CALL Rhetos.DataMigrationUse('{0}', '{1}', '{2}', NULL);
ALTER TABLE {0}.{1} DROP COLUMN [{2}];
    </value>
  </data>
  <data name="LegacyPropertySimpleDatabaseDefinition_ExtendTriggerSelectForUpdate" xml:space="preserve">
    <value>,
    {0} = inserted.{1}</value>
  </data>
  <data name="LegacyPropertyReferenceDatabaseDefinition_ExtendTriggerSelectForUpdate" xml:space="preserve">
    <value>,
    {0} = {1}.{2}</value>
  </data>
  <data name="EntityDatabaseDefinition_DefaultConstraintName" xml:space="preserve">
    <value>DF_{1}_ID</value>
  </data>
  <data name="EntityDatabaseDefinition_PrimaryKeyConstraintName" xml:space="preserve">
    <value>PK_{1}</value>
  </data>
  <data name="LoggingRelatedItemDatabaseDefinition_TempColumnDefinition" xml:space="preserve">
    <value>,
    {0} uuid,
    {1} uuid</value>
  </data>
  <data name="LoggingRelatedItemDatabaseDefinition_TempColumnList" xml:space="preserve">
    <value>,
        {0},
        {1}</value>
  </data>
  <data name="LoggingRelatedItemDatabaseDefinition_TempColumnSelect" xml:space="preserve">
    <value>,
    {0} = deleted.{3},
    {1} = inserted.{3}</value>
  </data>
  <data name="LoggingRelatedItemDatabaseDefinition_AfterInsertLog" xml:space="preserve">
    <value>INSERT INTO
    Common.LogRelatedItem (ID, LogID, TableName, ItemId, Relation)
SELECT
    ID = gen_random_uuid(),
    LogID = ID,
    TableName = '{2}',
    ItemId = {0},
    Relation = {4}
FROM
    temp_log
WHERE
    {0} IS NOT NULL;

INSERT INTO
    Common.LogRelatedItem (ID, LogID, TableName, ItemId, Relation)
SELECT
    ID = gen_random_uuid(),
    LogID = ID,
    TableName = '{2}',
    ItemId = {1},
    Relation = {4}
FROM
    temp_log
WHERE
    {1} IS NOT NULL
    AND ({1} &lt;&gt; {0} OR {0} IS NULL);

</value>
  </data>
  <data name="SqlNotNull_Create" xml:space="preserve">
    <value>
{5}
UPDATE {0}.{1} SET {2} = {4} WHERE {2} IS NULL;
ALTER TABLE {0}.{1} ALTER COLUMN {2} SET NOT NULL;
    </value>
  </data>
</root>