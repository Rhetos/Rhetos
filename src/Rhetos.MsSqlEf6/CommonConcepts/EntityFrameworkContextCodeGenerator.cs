/*
    Copyright (C) 2014 Omega software d.o.o.

    This file is part of Rhetos.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

using Rhetos.Compiler;
using Rhetos.Dsl;
using Rhetos.Extensibility;
using System.ComponentModel.Composition;

namespace Rhetos.Dom.DefaultConcepts
{
    [Export(typeof(IConceptCodeGenerator))]
    [ExportMetadata(MefProvider.Implements, typeof(InitializationConcept))]
    [ExportMetadata(MefProvider.DependsOn, typeof(DomInitializationCodeGenerator))]
    public class EntityFrameworkContextCodeGenerator : IConceptCodeGenerator
    {
        public static readonly string EntityFrameworkContextMembersTag = "/*EntityFrameworkContextMembers*/";
        public static readonly string EntityFrameworkContextInitializeTag = "/*EntityFrameworkContextInitialize*/";
        public static readonly string EntityFrameworkConfigurationTag = "/*EntityFrameworkConfiguration*/";

        private readonly CommonConceptsOptions _commonConceptsOptions;

        public EntityFrameworkContextCodeGenerator(CommonConceptsOptions commonConceptsOptions)
        {
            _commonConceptsOptions = commonConceptsOptions;
        }

        public void GenerateCode(IConceptInfo conceptInfo, ICodeBuilder codeBuilder)
        {
            codeBuilder.InsertCodeToFile(GetOrmSnippet(), "EntityFrameworkContext");

            codeBuilder.InsertCode(
            @"builder.RegisterType<EntityFrameworkConfiguration>()
                .As<System.Data.Entity.DbConfiguration>()
                .SingleInstance();
            builder.RegisterType<EntityFrameworkContext>()
                .As<EntityFrameworkContext>()
                .As<System.Data.Entity.DbContext>()
                .InstancePerLifetimeScope();
            ",
                ModuleCodeGenerator.CommonAutofacConfigurationMembersTag);

            codeBuilder.InsertCode(
                "return _executionContext.EntityFrameworkContext.Set<TQueryableEntity>().AsNoTracking();\r\n            ",
                DomInitializationCodeGenerator.OrmRepositoryBaseQueryTag);
        }

        private string GetOrmSnippet() =>
$@"// <autogenerated />
namespace Common
{{
    {DomInitializationCodeGenerator.DisableWarnings(_commonConceptsOptions)}{DomInitializationCodeGenerator.StandardNamespacesSnippet}
    using Autofac;
    {ModuleCodeGenerator.CommonUsingTag}

    public class EntityFrameworkContext : System.Data.Entity.DbContext
    {{
        private readonly Rhetos.Utilities.RhetosAppOptions _rhetosAppOptions;
        private readonly Rhetos.Utilities.DatabaseOptions _databaseOptions;

        public EntityFrameworkContext(
            Rhetos.Persistence.IPersistenceTransaction persistenceTransaction,
            Rhetos.Dom.DefaultConcepts.Persistence.EntityFrameworkMetadata metadata,
            System.Data.Entity.DbConfiguration entityFrameworkConfiguration, // EntityFrameworkConfiguration is provided as an IoC dependency for EntityFrameworkContext in order to initialize the global DbConfiguration before using DbContext.
            Rhetos.Utilities.RhetosAppOptions rhetosAppOptions,
            Rhetos.Utilities.DatabaseOptions databaseOptions)
            : base(new System.Data.Entity.Core.EntityClient.EntityConnection(metadata.MetadataWorkspace, persistenceTransaction.Connection), false)
        {{
            _rhetosAppOptions = rhetosAppOptions;
            _databaseOptions = databaseOptions;

            System.Data.Entity.Database.SetInitializer<EntityFrameworkContext>(null); // Prevent EF from creating database objects.
            this.Configuration.UseDatabaseNullSemantics = _rhetosAppOptions.EntityFrameworkUseDatabaseNullSemantics;

            {EntityFrameworkContextInitializeTag}
            this.Database.CommandTimeout = _databaseOptions.SqlCommandTimeout;
            this.Database.UseTransaction(persistenceTransaction.Transaction);
        }}

        /// <summary>
        /// A helper method to unify EF6 and EFCore custom SQL queries.
        /// </summary>
        public TEntity[] LoadFromSql<TEntity>(string sql, params object[] parameters) where TEntity : class
        {{
            return this.Database.SqlQuery<TEntity>(sql, parameters).ToArray();
        }}

        {EntityFrameworkContextMembersTag}
    }}

    public class EntityFrameworkConfiguration : System.Data.Entity.DbConfiguration
    {{
        public EntityFrameworkConfiguration()
        {{
            SetProviderServices(""System.Data.SqlClient"", System.Data.Entity.SqlServer.SqlProviderServices.Instance);

            {EntityFrameworkConfigurationTag}

            System.Data.Entity.DbConfiguration.SetConfiguration(this);
        }}
    }}{DomInitializationCodeGenerator.RestoreWarnings(_commonConceptsOptions)}
}}
";
    }
}
