/*
    Copyright (C) 2014 Omega software d.o.o.

    This file is part of Rhetos.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

using Rhetos.DatabaseGenerator.DefaultConcepts;
using Rhetos.Dsl;
using Rhetos.Dsl.DefaultConcepts;
using Rhetos.Persistence;
using System;
using System.Linq;
using System.Security.Cryptography;
using System.Text;

namespace Rhetos.Dom.DefaultConcepts.Persistence
{
    class EfMappingViewsHash : IEfMappingViewsHash
    {
        private readonly IDslModel _dslModel;
        private readonly ConceptMetadata _conceptMetadata;
        private readonly SHA256 _sha256;

        public EfMappingViewsHash(IDslModel dslModel, ConceptMetadata conceptMetadata)
        {
            _dslModel = dslModel;
            _conceptMetadata = conceptMetadata;
            _sha256 = SHA256.Create();
        }

        public string GetAdditionalHash()
        {
            // From reviewing the content of the generated EF view cache file,
            // we only need to check if the column names and the property ordering is unchanged
            // for each entity.
            // Ordering of entities should no be important.

            var ormProperties = _dslModel.Concepts // It is important to use the ordering of properties in "_dslModel.Concepts", since this is how the C# properties are generated by CodeGenerator.
                .OfType<PropertyInfo>()
                .Where(p => p.DataStructure is IOrmDataStructure)
                .Select(p => (
                    DataStructure: p.DataStructure.FullName,
                    ColumnName: _conceptMetadata.GetColumnName(p)));

            var viewCacheState = new StringBuilder();
            foreach (var dsGroup in ormProperties.GroupBy(p => p.DataStructure).OrderBy(group => group.Key)) // Sorting data structure because their order in DslModel should not affect the EF views.
            {
                viewCacheState.Append(dsGroup.Key).Append(' ');
                foreach (var column in dsGroup) // Keeping the original ordering or properties within the data structure. Using only column names that are showing in EF views cache file.
                    viewCacheState.Append(column.ColumnName).Append(' ');
                viewCacheState.Append('\n');
            }

            byte[] hash = _sha256.ComputeHash(Encoding.UTF8.GetBytes(viewCacheState.ToString()));
            return BitConverter.ToString(hash).Replace("-", "");
        }
    }
}
