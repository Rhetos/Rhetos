/*
    Copyright (C) 2014 Omega software d.o.o.

    This file is part of Rhetos.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

using Rhetos.Compiler;
using Rhetos.Dom.DefaultConcepts;
using Rhetos.Dsl;
using Rhetos.Extensibility;
using System.ComponentModel.Composition;

namespace Rhetos.EfCore
{
    [Export(typeof(IConceptCodeGenerator))]
    [ExportMetadata(MefProvider.Implements, typeof(InitializationConcept))]
    [ExportMetadata(MefProvider.DependsOn, typeof(DomInitializationCodeGenerator))]
    public class DbContextCodeGenerator : IConceptCodeGenerator
    {
        public static readonly string EntityFrameworkContextMembersTag = "/*EntityFrameworkContextMembers*/";
        public static readonly string EntityFrameworkContextInitializeTag = "/*EntityFrameworkContextInitialize*/";
        public static readonly string EntityFrameworkOnConfiguringTag = "/*EntityFrameworkOnConfiguring*/";
        public static readonly string EntityFrameworkOnModelCreatingTag = "/*EntityFrameworkOnModelCreating*/";

        private readonly CommonConceptsOptions _commonConceptsOptions;

        public DbContextCodeGenerator(CommonConceptsOptions commonConceptsOptions)
        {
            _commonConceptsOptions = commonConceptsOptions;
        }

        public void GenerateCode(IConceptInfo conceptInfo, ICodeBuilder codeBuilder)
        {
            codeBuilder.InsertCodeToFile(GetOrmSnippet(), "EntityFrameworkContext");

            codeBuilder.InsertCode(
            @"builder.RegisterType<EntityFrameworkContext>()
                .As<EntityFrameworkContext>()
                .As<Microsoft.EntityFrameworkCore.DbContext>()
                .InstancePerLifetimeScope();
            builder.RegisterType<Microsoft.EntityFrameworkCore.DbContextOptions<EntityFrameworkContext>>(); // The options can be overridden by a custom registration.
            ",
                ModuleCodeGenerator.CommonAutofacConfigurationMembersTag);

            codeBuilder.InsertCode(
                @"return Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsNoTracking(
                _executionContext.EntityFrameworkContext.Set<TQueryableEntity>());",
                DomInitializationCodeGenerator.OrmRepositoryBaseQueryTag);
        }

        private string GetOrmSnippet() =>
$@"// <autogenerated />
namespace Common
{{
    {DomInitializationCodeGenerator.DisableWarnings(_commonConceptsOptions)}{DomInitializationCodeGenerator.StandardNamespacesSnippet}
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Query.SqlExpressions;
    using Microsoft.EntityFrameworkCore.Storage;
    using System.Data;
    {ModuleCodeGenerator.CommonUsingTag}

    public sealed class EntityFrameworkContext : DbContext
    {{
        private readonly Rhetos.Persistence.IPersistenceTransaction _persistenceTransaction;
        private readonly Rhetos.Utilities.RhetosAppOptions _rhetosAppOptions;
        private readonly Rhetos.Utilities.DatabaseOptions _databaseOptions;

        public EntityFrameworkContext(
            DbContextOptions<EntityFrameworkContext> options,
            Rhetos.Persistence.IPersistenceTransaction persistenceTransaction,
            Rhetos.Utilities.RhetosAppOptions rhetosAppOptions,
            Rhetos.Utilities.DatabaseOptions databaseOptions)
            : base(options)
        {{
            _persistenceTransaction = persistenceTransaction;
            _rhetosAppOptions = rhetosAppOptions;
            _databaseOptions = databaseOptions;

            this.Database.UseTransaction(_persistenceTransaction.Transaction);
            this.Database.SetCommandTimeout(_databaseOptions.SqlCommandTimeout);
            {EntityFrameworkContextInitializeTag}
        }}

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {{
            {EntityFrameworkOnConfiguringTag}
        }}

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {{
            base.OnModelCreating(modelBuilder);

            modelBuilder.HasDbFunction(typeof(DatabaseExtensionFunctions).GetMethod(nameof(DatabaseExtensionFunctions.EqualsCaseInsensitive), new[] {{ typeof(string), typeof(string) }}))
                .HasTranslation(args => new SqlBinaryExpression(ExpressionType.Equal, args[0], args[1], args[0].Type, args[0].TypeMapping));

            modelBuilder.HasDbFunction(typeof(DatabaseExtensionFunctions).GetMethod(nameof(DatabaseExtensionFunctions.NotEqualsCaseInsensitive), new[] {{ typeof(string), typeof(string) }}))
                .HasTranslation(args => new SqlBinaryExpression(ExpressionType.NotEqual, args[0], args[1], args[0].Type, args[0].TypeMapping));

            modelBuilder.HasDbFunction(typeof(DatabaseExtensionFunctions).GetMethod(nameof(DatabaseExtensionFunctions.IsLessThan), new[] {{ typeof(string), typeof(string) }}))
                .HasTranslation(args => new SqlBinaryExpression(ExpressionType.LessThan, args[0], args[1], args[0].Type, args[0].TypeMapping));

            modelBuilder.HasDbFunction(typeof(DatabaseExtensionFunctions).GetMethod(nameof(DatabaseExtensionFunctions.IsLessThanOrEqual), new[] {{ typeof(string), typeof(string) }}))
                .HasTranslation(args => new SqlBinaryExpression(ExpressionType.LessThanOrEqual, args[0], args[1], args[0].Type, args[0].TypeMapping));

            modelBuilder.HasDbFunction(typeof(DatabaseExtensionFunctions).GetMethod(nameof(DatabaseExtensionFunctions.IsGreaterThan), new[] {{ typeof(string), typeof(string) }}))
                .HasTranslation(args => new SqlBinaryExpression(ExpressionType.GreaterThan, args[0], args[1], args[0].Type, args[0].TypeMapping));

            modelBuilder.HasDbFunction(typeof(DatabaseExtensionFunctions).GetMethod(nameof(DatabaseExtensionFunctions.IsGreaterThanOrEqual), new[] {{ typeof(string), typeof(string) }}))
                .HasTranslation(args => new SqlBinaryExpression(ExpressionType.GreaterThanOrEqual, args[0], args[1], args[0].Type, args[0].TypeMapping));

            modelBuilder.HasDbFunction(typeof(DatabaseExtensionFunctions).GetMethod(nameof(DatabaseExtensionFunctions.StartsWith), new[] {{ typeof(int), typeof(string) }}))
                .HasTranslation(args =>
                {{
                    var columnAsStringExpression = new SqlUnaryExpression(ExpressionType.Convert, args[0], typeof(string), new StringTypeMapping(""nvarchar(max)"", DbType.String));
                    var valueExpression = args[1];
                    var patternExpression = new SqlBinaryExpression(ExpressionType.Add,
                        valueExpression, new SqlFragmentExpression(""N'%'""),
                        typeof(string), new StringTypeMapping(""nvarchar(max)"", DbType.String));
                    return new LikeExpression(columnAsStringExpression, patternExpression, null, null);
                }});

            modelBuilder.HasDbFunction(typeof(DatabaseExtensionFunctions).GetMethod(nameof(DatabaseExtensionFunctions.StartsWithCaseInsensitive), new[] {{ typeof(string), typeof(string) }}))
                .HasTranslation(args =>
                {{
                    var patternExpression = new SqlBinaryExpression(ExpressionType.Add,
                        args[1], new SqlFragmentExpression(""N'%'""),
                        typeof(string), new StringTypeMapping(""nvarchar(max)"", DbType.String));
                    return new LikeExpression(args[0], patternExpression, null, null);
                }});

            modelBuilder.HasDbFunction(typeof(DatabaseExtensionFunctions).GetMethod(nameof(DatabaseExtensionFunctions.EndsWithCaseInsensitive), new[] {{ typeof(string), typeof(string) }}))
                .HasTranslation(args =>
                {{
                    var patternExpression = new SqlBinaryExpression(ExpressionType.Add,
                        new SqlFragmentExpression(""N'%'""), args[1],
                        typeof(string), new StringTypeMapping(""nvarchar(max)"", DbType.String));
                    return new LikeExpression(args[0], patternExpression, null, null);
                }});

            modelBuilder.HasDbFunction(typeof(DatabaseExtensionFunctions).GetMethod(nameof(DatabaseExtensionFunctions.ContainsCaseInsensitive), new[] {{ typeof(string), typeof(string) }}))
                .HasTranslation(args =>
                {{
                    var patternExpression = new SqlBinaryExpression(ExpressionType.Add,
                        new SqlFragmentExpression(""N'%'""), args[1],
                        typeof(string), new StringTypeMapping(""nvarchar(max)"", DbType.String));

                    patternExpression = new SqlBinaryExpression(ExpressionType.Add,
                        patternExpression, new SqlFragmentExpression(""N'%'""),
                        typeof(string), new StringTypeMapping(""nvarchar(max)"", DbType.String));

                    return new LikeExpression(args[0], patternExpression, null, null);
                }});

            modelBuilder.HasDbFunction(typeof(DatabaseExtensionFunctions).GetMethod(nameof(DatabaseExtensionFunctions.Like), new[] {{ typeof(string), typeof(string) }}))
                .HasTranslation(args => new LikeExpression(args[0], args[1], null, null));

            modelBuilder.HasDbFunction(typeof(DatabaseExtensionFunctions).GetMethod(nameof(DatabaseExtensionFunctions.CastToString), new[] {{ typeof(int) }}))
                .HasTranslation(args => new SqlUnaryExpression(ExpressionType.Convert, args[0], typeof(string), new StringTypeMapping(""nvarchar(max)"", DbType.String)));

            {EntityFrameworkOnModelCreatingTag}
        }}

        /// <summary>
        /// A helper method to unify EF6 and EFCore custom SQL queries.
        /// </summary>
        public TEntity[] LoadFromSql<TEntity>(string sql, params object[] parameters) where TEntity : class
        {{
            return this.Set<TEntity>().FromSqlRaw(sql, parameters).AsNoTracking().ToArray();
        }}

        {EntityFrameworkContextMembersTag}
    }}{DomInitializationCodeGenerator.RestoreWarnings(_commonConceptsOptions)}
}}
";
    }
}
