/*
    Copyright (C) 2014 Omega software d.o.o.

    This file is part of Rhetos.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

using Rhetos.Compiler;
using Rhetos.Dom.DefaultConcepts;
using Rhetos.Dsl;
using Rhetos.Extensibility;
using System.ComponentModel.Composition;

namespace Rhetos.EfCore
{
    [Export(typeof(IConceptCodeGenerator))]
    [ExportMetadata(MefProvider.Implements, typeof(InitializationConcept))]
    [ExportMetadata(MefProvider.DependsOn, typeof(DomInitializationCodeGenerator))]
    public class DbContextCodeGenerator : IConceptCodeGenerator
    {
        public static readonly string EntityFrameworkContextMembersTag = "/*EntityFrameworkContextMembers*/";
        public static readonly string EntityFrameworkContextInitializeTag = "/*EntityFrameworkContextInitialize*/";
        public static readonly string EntityFrameworkOnModelCreatingTag = "/*EntityFrameworkOnModelCreating*/";
        public static readonly string EntityFrameworkContextOptionsTag = "/*EntityFrameworkContextOptions*/";

        private readonly CommonConceptsOptions _commonConceptsOptions;

        public DbContextCodeGenerator(CommonConceptsOptions commonConceptsOptions)
        {
            _commonConceptsOptions = commonConceptsOptions;
        }

        public void GenerateCode(IConceptInfo conceptInfo, ICodeBuilder codeBuilder)
        {
            codeBuilder.InsertCodeToFile(GetOrmSnippet(), "EntityFrameworkContext");

            codeBuilder.InsertCode(
            $@"builder.RegisterType<EntityFrameworkContext>()
                .As<EntityFrameworkContext>()
                .As<Microsoft.EntityFrameworkCore.DbContext>()
                .InstancePerLifetimeScope();
            builder.Register<Microsoft.EntityFrameworkCore.DbContextOptions<EntityFrameworkContext>>(context =>
            {{
                var optionsBuilder = new Microsoft.EntityFrameworkCore.DbContextOptionsBuilder<EntityFrameworkContext>();
                {EntityFrameworkContextOptionsTag}
                return optionsBuilder.Options;
            }});
            ",
                ModuleCodeGenerator.CommonAutofacConfigurationMembersTag);

            codeBuilder.InsertCode(
                @"return Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsNoTracking(
                _executionContext.EntityFrameworkContext.Set<TQueryableEntity>());",
                DomInitializationCodeGenerator.OrmRepositoryBaseQueryTag);
        }

        private string GetOrmSnippet() =>
$@"// <autogenerated />
namespace Common
{{
    {DomInitializationCodeGenerator.DisableWarnings(_commonConceptsOptions)}{DomInitializationCodeGenerator.StandardNamespacesSnippet}
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Query.SqlExpressions;
    using Microsoft.EntityFrameworkCore.Storage;
    using System.Data;
    {ModuleCodeGenerator.CommonUsingTag}

    public sealed class EntityFrameworkContext : DbContext
    {{
        private readonly Rhetos.Persistence.IPersistenceTransaction _persistenceTransaction;
        private readonly Rhetos.Utilities.DatabaseOptions _databaseOptions;
        private readonly Rhetos.Logging.ILogger _logger;

        public EntityFrameworkContext(
            DbContextOptions<EntityFrameworkContext> options,
            Rhetos.Persistence.IPersistenceTransaction persistenceTransaction,
            Rhetos.Utilities.DatabaseOptions databaseOptions,
            Rhetos.Logging.ILogProvider logProvider)
            : base(options)
        {{
            _persistenceTransaction = persistenceTransaction;
            _databaseOptions = databaseOptions;
            _logger = logProvider.GetLogger(GetType().Name);

            this.Database.UseTransaction(_persistenceTransaction.Transaction);
            this.Database.SetCommandTimeout(_databaseOptions.SqlCommandTimeout);

            {EntityFrameworkContextInitializeTag}
        }}

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {{
            base.OnModelCreating(modelBuilder);

            {EntityFrameworkOnModelCreatingTag}

            _logger.Write(Rhetos.Logging.EventType.Trace, () => modelBuilder.Model.ToDebugString());
        }}

        /// <summary>
        /// A helper method to unify EF6 and EFCore custom SQL queries.
        /// </summary>
        public TEntity[] LoadFromSql<TEntity>(string sql, params object[] parameters) where TEntity : class
        {{
            return this.Set<TEntity>().FromSqlRaw(sql, parameters).AsNoTracking().ToArray();
        }}

        {EntityFrameworkContextMembersTag}
    }}{DomInitializationCodeGenerator.RestoreWarnings(_commonConceptsOptions)}
}}
";
    }
}
