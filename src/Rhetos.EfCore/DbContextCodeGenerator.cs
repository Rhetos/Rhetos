/*
    Copyright (C) 2014 Omega software d.o.o.

    This file is part of Rhetos.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

using Rhetos.Compiler;
using Rhetos.Dom.DefaultConcepts;
using Rhetos.Dsl;
using Rhetos.Extensibility;
using System.ComponentModel.Composition;

namespace Rhetos.EfCore
{
    [Export(typeof(IConceptCodeGenerator))]
    [ExportMetadata(MefProvider.Implements, typeof(InitializationConcept))]
    [ExportMetadata(MefProvider.DependsOn, typeof(DomInitializationCodeGenerator))]
    public class DbContextCodeGenerator : IConceptCodeGenerator
    {
        public static readonly string EntityFrameworkContextMembersTag = "/*EntityFrameworkContextMembers*/";
        public static readonly string EntityFrameworkContextInitializeTag = "/*EntityFrameworkContextInitialize*/";
        public static readonly string EntityFrameworkContextOnModelCreatingTag = "/*EntityFrameworkContextOnModelCreating*/";
        public static readonly string EntityFrameworkContextOptionsBuilderTag = "/*EntityFrameworkContextOptionsBuilder*/";
        public static readonly string EntityFrameworkContextOptionsParameterDeclarationTag = "/*EntityFrameworkContextOptionsParameterDeclaration*/";
        public static readonly string EntityFrameworkContextOptionsParameterCallTag = "/*EntityFrameworkContextOptionsParameterCall*/";

        private readonly CommonConceptsOptions _commonConceptsOptions;

        public DbContextCodeGenerator(CommonConceptsOptions commonConceptsOptions)
        {
            _commonConceptsOptions = commonConceptsOptions;
        }

        public void GenerateCode(IConceptInfo conceptInfo, ICodeBuilder codeBuilder)
        {
            codeBuilder.InsertCodeToFile(GetDbContextAndOptionsSnippet(), "EntityFrameworkContext");

            codeBuilder.InsertCode("using Microsoft.EntityFrameworkCore;" + Environment.NewLine + "    ", ModuleCodeGenerator.CommonUsingTag);

            codeBuilder.InsertCode(
            $@"builder.RegisterType<EntityFrameworkContext>()
                .As<EntityFrameworkContext>()
                .As<DbContext>()
                .InstancePerLifetimeScope();
            builder.SetRhetosDbContextOptions();
            ",
                ModuleCodeGenerator.CommonAutofacConfigurationMembersTag);

            codeBuilder.InsertCode(
                @"return _executionContext.EntityFrameworkContext.Set<TQueryableEntity>();", // AsNoTracking is not needed here, it is set by default in SetRhetosDbContextOptions method.
                DomInitializationCodeGenerator.OrmRepositoryBaseQueryTag);
        }

        private string GetDbContextAndOptionsSnippet() =>
$@"// <autogenerated />
namespace Common
{{
    {DomInitializationCodeGenerator.DisableWarnings(_commonConceptsOptions)}{DomInitializationCodeGenerator.StandardNamespacesSnippet}
    using Microsoft.EntityFrameworkCore.Query.SqlExpressions;
    using Microsoft.EntityFrameworkCore.Storage;
    using System.Data;
    {ModuleCodeGenerator.CommonUsingTag}

    public sealed class EntityFrameworkContext : DbContext
    {{
        private readonly Rhetos.Persistence.IPersistenceTransaction _persistenceTransaction;
        private readonly Rhetos.Utilities.DatabaseOptions _databaseOptions;
        private readonly Rhetos.Logging.ILogger _logger;

        public EntityFrameworkContext(
            DbContextOptions<EntityFrameworkContext> options,
            Rhetos.Persistence.IPersistenceTransaction persistenceTransaction,
            Rhetos.Utilities.DatabaseOptions databaseOptions,
            Rhetos.Logging.ILogProvider logProvider)
            : base(options)
        {{
            _persistenceTransaction = persistenceTransaction;
            _databaseOptions = databaseOptions;
            _logger = logProvider.GetLogger(GetType().Name);

            this.Database.UseTransaction(_persistenceTransaction.Transaction);
            this.Database.SetCommandTimeout(_databaseOptions.SqlCommandTimeout);

            {EntityFrameworkContextInitializeTag}
        }}

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {{
            base.OnModelCreating(modelBuilder);

            {EntityFrameworkContextOnModelCreatingTag}

            _logger.Write(Rhetos.Logging.EventType.Trace, () => modelBuilder.Model.ToDebugString());
        }}

        /// <summary>
        /// A helper method to unify EF6 and EFCore custom SQL queries.
        /// </summary>
        public TSimpleEntity[] LoadFromSql<TQueryableEntity, TSimpleEntity>(string sql, params object[] parameters) where TSimpleEntity : class, IEntity where TQueryableEntity : class, IQueryableEntity<TSimpleEntity>
        {{
            return this.Set<TQueryableEntity>().FromSqlRaw(sql, parameters).AsNoTracking().GenericToSimple<TSimpleEntity>().ToArray();
        }}

        {EntityFrameworkContextMembersTag}
    }}
}}

namespace Rhetos
{{
    {DomInitializationCodeGenerator.StandardNamespacesSnippet}
    using Microsoft.EntityFrameworkCore.Query.SqlExpressions;
    using Microsoft.EntityFrameworkCore.Storage;
    using System.Data;
    {ModuleCodeGenerator.CommonUsingTag}

    public static class EfCoreRhetosConfigurationExtensions
    {{
        /// <summary>
        /// Call this method to set and override the default DbContext options.
        /// To review the default options, see this method's implementation in the generated code.
        /// </summary>
        /// <remarks>
        /// If called multiple times, only the configuration from the last call will be used.
        /// </remarks>
        public static RhetosServiceCollectionBuilder SetRhetosDbContextOptions(this RhetosServiceCollectionBuilder builder,
            Action<DbContextOptionsBuilder<Common.EntityFrameworkContext>> configureOptions = null{EntityFrameworkContextOptionsParameterDeclarationTag})
        {{
            builder.ConfigureRhetosHost((serviceProvider, rhetosHostBuilder) =>
                rhetosHostBuilder.ConfigureContainer(builder =>
                    Autofac.EfCoreRhetosConfigurationExtensions.SetRhetosDbContextOptions(builder, configureOptions{EntityFrameworkContextOptionsParameterCallTag})));
            return builder;
        }}
    }}
}}

namespace Autofac
{{
    {DomInitializationCodeGenerator.StandardNamespacesSnippet}
    using Microsoft.EntityFrameworkCore.Query.SqlExpressions;
    using Microsoft.EntityFrameworkCore.Storage;
    using System.Data;
    {ModuleCodeGenerator.CommonUsingTag}

    public static class EfCoreRhetosConfigurationExtensions
    {{
        /// <summary>
        /// Call this method to set and override the default DbContext options.
        /// To review the default options, see this method's implementation in the generated code.
        /// </summary>
        /// <remarks>
        /// If called multiple times, only the configuration from the last call will be used.
        /// </remarks>
        public static ContainerBuilder SetRhetosDbContextOptions(this ContainerBuilder builder,
            Action<DbContextOptionsBuilder<Common.EntityFrameworkContext>> configureOptions = null{EntityFrameworkContextOptionsParameterDeclarationTag})
        {{
            builder.Register<DbContextOptions<Common.EntityFrameworkContext>>(context =>
            {{
                var optionsBuilder = new DbContextOptionsBuilder<Common.EntityFrameworkContext>();
                optionsBuilder.UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);
                {EntityFrameworkContextOptionsBuilderTag}
                configureOptions?.Invoke(optionsBuilder);
                return optionsBuilder.Options;
            }});
            return builder;
        }}
    }}{DomInitializationCodeGenerator.RestoreWarnings(_commonConceptsOptions)}
}}";
    }
}
