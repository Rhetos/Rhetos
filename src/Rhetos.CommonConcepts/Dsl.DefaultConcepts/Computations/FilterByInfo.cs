/*
    Copyright (C) 2014 Omega software d.o.o.

    This file is part of Rhetos.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

using System.Collections.Generic;
using System.ComponentModel.Composition;

namespace Rhetos.Dsl.DefaultConcepts
{
    /// <summary>
    /// A read method that loads and returns data for the given parameter value.
    /// The code snippet should be a lambda expression that returns an array of records:
    /// <c>(repository, parameter) => DataStructureType[]</c>.
    /// The parameter type also represents the filter name.
    /// </summary>
    [Export(typeof(IConceptInfo))]
    [ConceptKeyword("FilterBy")]
    public class FilterByInfo : IConceptInfo
    {
        [ConceptKey]
        public DataStructureInfo Source { get; set; }

        [ConceptKey]
        public string Parameter { get; set; }

        public string Expression { get; set; }
    }

    [Export(typeof(IConceptMacro))]
    public class FilterByMacro : IConceptMacro<FilterByInfo>
    {
        public IEnumerable<IConceptInfo> CreateNewConcepts(FilterByInfo conceptInfo, IDslModel existingConcepts)
        {
            // Creates an empty LoadInfo, representing the Load method that will be generated by the FilterBy concept.
            // LoadInfo is needed for plugin packages that want to list available loaders and filters.
            // Instead of this macro, it would be cleaner for FilterByInfo to inherit LoadInfo,
            // but it is not feasible because of parameter mismatch.
            // For better error reporting in future, it might be better to create a new implementation of LoadInfo,
            // for example FilterByLoadInfo, that will make it more clear that this LoadInfo instance is related to the FilterByInfo.
            return new[] {
                new LoadInfo {
                    DataStructure = conceptInfo.Source,
                    Parameter = conceptInfo.Parameter
                }
            };
        }
    }
}
