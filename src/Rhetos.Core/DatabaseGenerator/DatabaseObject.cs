/*
    Copyright (C) 2014 Omega software d.o.o.

    This file is part of Rhetos.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

using System;

namespace Rhetos.DatabaseGenerator
{
    /// <summary>
    /// A database object, generated by single code generator (<see cref="IConceptDatabaseDefinition"/>) from a single DSL statement (<see cref="Dsl.IConceptInfo"/>).
    /// </summary>
    public class DatabaseObject : IEquatable<DatabaseObject>
    {
        /// <summary>
        /// AssemblyQualifiedName.
        /// </summary>
        public string ConceptInfoTypeName;

        /// <summary>
        /// See <see cref="Rhetos.Dsl.ConceptInfoHelper.GetKey"/>.
        /// </summary>
        public string ConceptInfoKey;

        /// <summary>
        /// AssemblyQualifiedName.
        /// </summary>
        public string ConceptImplementationTypeName;

        /// <summary>
        /// SQL query that creates the object in database.
        /// </summary>
        public string CreateQuery;

        /// <summary>
        /// SQL query that removes the object from database.
        /// </summary>
        public string RemoveQuery;

        public DatabaseObject[] DependsOn;

        public override string ToString()
        {
            return ConceptInfoKey + "/" + GetConceptImplementationType_SimpleName();
        }

        private string _conceptImplementationType_FullName;

        /// <summary>
        /// Converts ConceptImplementationTypeName from <see cref="Type.AssemblyQualifiedName"/> to <see cref="Type.FullName"/>.
        /// </summary>
        protected string GetConceptImplementationType_FullName()
        {
            if (_conceptImplementationType_FullName == null)
                _conceptImplementationType_FullName = ConceptImplementationTypeName.Substring(0, ConceptImplementationTypeName.IndexOf(','));
            return _conceptImplementationType_FullName;
        }

        /// <summary>
        /// Converts ConceptImplementationTypeName from <see cref="Type.AssemblyQualifiedName"/> to short name (type.Name).
        /// </summary>
        protected string GetConceptImplementationType_SimpleName()
        {
            var fullTypeName = GetConceptImplementationType_FullName();
            return fullTypeName.Substring(fullTypeName.LastIndexOf('.') + 1); // Works even for type without namespace.
        }

        public bool Equals(DatabaseObject other)
        {
            return ConceptInfoKey == other.ConceptInfoKey
                && GetConceptImplementationType_FullName() == other.GetConceptImplementationType_FullName();
        }

        public override bool Equals(object obj)
        {
            if (obj is DatabaseObject databaseObject)
                return Equals(databaseObject);
            else
                return false;
        }

        public override int GetHashCode()
        {
            return ConceptInfoKey.GetHashCode() ^ GetConceptImplementationType_FullName().GetHashCode();
        }
    }
}
