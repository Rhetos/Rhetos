Module TestHierarchy
{
	Entity Simple
	{
        ShortString Name;
        Hierarchy Parent;
        
        ItemFilter Level2OrDeeper 'item => item.Extension_SimpleParentHierarchy.Level >= 2';
	}
    
	Entity Simple2
	{
        ShortString Name2;
        Hierarchy Parent2 { SingleRoot; }
	}
    
	Entity WithPath
	{
        ShortString Title;
        Hierarchy Group GroupSequence Title ' - ';
	}
    
    Browse BrowseWithPath TestHierarchy.WithPath
    {
        LongString GroupSequence { From 'Extension_WithPathGroupHierarchy.GroupSequence'; }
    }
}

Module TestHistory
{
	Entity Minimal
	{
		History;
        Integer Code;
	}
	
	Entity Simple
	{
        Integer Code { History; }
		ShortString Name;
	}
	
    SqlQueryable SimpleWithLockAdd
    "
        SELECT
            ID,
            NameNew = Name + 'test'
        FROM TestHistory.SimpleWithLock
    "
    {
        Extends TestHistory.SimpleWithLock;
        SqlDependsOn TestHistory.SimpleWithLock;
        
        ShortString NameNew;
    }
    
    Entity SimpleWithLock
    {
        Integer Code { History; }
		ShortString Name { History; }
        
        ItemFilter NameNewWithLetterAtest 'item => item.Extension_SimpleWithLockAdd.NameNew.ToLower().Contains("atest")';
		LockProperty Name.NameNewWithLetterAtest 'Name is locked if NameNew contains word ''atest''.';
    }
    
    Persisted SimpleWithLockAndDenyAdd TestHistory.ComputeSimpleWithLockAndDenyAdd
    {
        AllProperties;
        KeepSynchronized;
    }
    
    SqlQueryable ComputeSimpleWithLockAndDenyAdd
    "
        SELECT
            ID,
            NameNew = Name + 'test'
        FROM TestHistory.SimpleWithLockAndDeny
    "
    {
        Extends TestHistory.SimpleWithLockAndDeny;
        ChangesOnChangedItems TestHistory.SimpleWithLockAndDeny 'Guid[]' 'changedItems => changedItems.Select(item => item.ID).ToArray()';
        SqlDependsOn TestHistory.SimpleWithLockAndDeny;
        
        ShortString NameNew;
    }
    
    Entity SimpleWithLockAndDeny
    {
        Integer Code { History; }
		ShortString Name { History; }
        
        ItemFilter NameNewWithLetterAtest 'item => item.Extension_SimpleWithLockAndDenyAdd.NameNew.ToLower().Contains("atest")';
		LockProperty Name.NameNewWithLetterAtest 'Name is locked if NameNew contains word ''atest''.';
        
        ItemFilter TooLongNameNew 'item => item.Extension_SimpleWithLockAndDenyAdd.NameNew.Length > 7';
		InvalidData TooLongNameNew '[Test] NameNew too long.';

        ItemFilter TooTooLongNameNew 'item => item.Extension_SimpleWithLockAndDenyAdd.NameNew.Length > 9';
		InvalidData TooTooLongNameNew '[Test] NameNew tootoo long.';

        ItemFilter FarTooLongNameNew 'item => item.Extension_SimpleWithLockAndDenyAdd.NameNew.Length > 11';
		InvalidData FarTooLongNameNew '[Test] NameNew fartoo long.';
    }
    
	Entity Standard
	{
		History { AllProperties; }
        Integer Code;
        ShortString Name;
        DateTime Birthday;
        ItemFilter TooLongName 'item => item.Name.Length > 10';
		InvalidData TooLongName '[Test] Name too long.';
	}
    
    Entity Other;
    
	Entity Complex
	{
		History { AllProperties; }
        ShortString Name { Required; Unique; }
        ShortString Code { AutoCodeForEach TestHistory.Complex.Parent; }
		DateTime Created { CreationTime; }
		DateTime Modified { ModificationTimeOf TestHistory.Complex.Name; }
        Reference Other TestHistory.Other { Detail; SqlIndex; }
        Hierarchy Parent;
        PessimisticLocking;
        Logging { Log TestHistory.Complex.Name; }
        ItemFilter TooLong 'item => item.Name.Length > 10';
		InvalidData TooLong '[Test] Name too long.';
	}
    
    Entity Sub
    {
        Reference Complex TestHistory.Complex { Detail; }
    }
        
    Entity BasicAutocode
    {
        History { AllProperties; }
        ShortString Name;
        ShortString Code { AutoCode; }
    }
            
    Entity BasicUnique
    {
        History { AllProperties; }
        ShortString Name { Unique; }
    }
    
    Entity Clean
    {
        ShortString Name;
    }
        
    Entity ReferenceClean
    {
        History { AllProperties; }
        Reference Clean TestHistory.Clean { Detail; }
        ShortString AddName;
    }
    
    Entity ExtendClean
    {
        Extends TestHistory.Clean;
        History { AllProperties; }
        ShortString SurName;
    }
}
