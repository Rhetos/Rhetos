
//=========================================================
// Simple test
	
Module TestPolymorphic
{
	Polymorphic SimpleBase
	{
		ShortString Name;
		Integer Days;
	}
	
	Entity Simple1
	{
		Integer Days; // Should automatically match Days implementation by name.
		ShortString Name;
		Is TestPolymorphic.SimpleBase;
	}
	
	Entity Simple2
	{
		ShortString Name1;
		Integer Name2;
		DateTime Finish;
		
		Is TestPolymorphic.SimpleBase
		{
			Implements TestPolymorphic.SimpleBase.Name "Name1 + '-' + CONVERT(NVARCHAR(256), Name2)";
			Implements TestPolymorphic.SimpleBase.Days "DATEDIFF(d, '1999-12-31', Finish)";
		}
	}
	
	Browse SimpleBrowse TestPolymorphic.SimpleBase
	{
		Take Name;
		Take Days;
		Take Subtype;
		Take 'Simple1.ID';
		Take 'Simple1.Name';
		Take Simple2;
		Take 'Simple2.Name1';
	}
}	

//=========================================================
// Empty polymorphic
	
Module TestPolymorphic
{
	Polymorphic Empty
	{
		// Empty. No subtypes.
	}
}
	
//=========================================================
// Implementing multiple polymorphic types. Multiple implementations of a polymorphic.
	
Module TestPolymorphic
{
	Polymorphic SecondBase
	{
		LongString Info;
	}
	
	Is Simple1 TestPolymorphic.SecondBase
	{
		Implements TestPolymorphic.SecondBase.Info "CONVERT(NVARCHAR(MAX), Name) +  '/' + CONVERT(NVARCHAR(MAX), Days)";
	}
	
	Is Simple2 TestPolymorphic.SecondBase
	{
		Implements TestPolymorphic.SecondBase.Info "CONVERT(NVARCHAR(MAX), Name1) +  '/' + CONVERT(NVARCHAR(MAX), Name2) +  '/' + CONVERT(NVARCHAR(MAX), Finish, 126)";
	}
	
	Entity Second1
	{
		LongString Info;
	}
	
	Is Second1 TestPolymorphic.SecondBase
	{
		Implements TestPolymorphic.SecondBase.Info "Info";
	}
}

//=========================================================
// Referencing polymorphic entity (foreing key constraint)
	
Module TestPolymorphic
{
	Entity Dependant
	{
		ShortString Name;
		Reference SimpleBase;
	}

	Entity DependantDetail
	{
		ShortString Name;
		Reference SimpleBase { Detail; }
	}

	Entity DependantExtension
	{
		Extends TestPolymorphic.SimpleBase;
		ShortString Name;
	}

	Entity DependantUniqueReference
	{
		UniqueReference TestPolymorphic.SimpleBase;
		ShortString Name;
	}
	
	Browse DependantBrowse TestPolymorphic.Dependant
	{
		Take Name;
		Take 'SimpleBase.Name';
	}
}

//=========================================================
// Polymorphic implementations without common properties
	
Module TestPolymorphic
{
	Entity Disjunctive1
	{
		ShortString Name;
	}
	
	Entity Disjunctive2
	{
		Integer Days;
	}
	
	Polymorphic Disjunctive; // No common properties.
	Entity Disjunctive1 { Is TestPolymorphic.Disjunctive; }
	Entity Disjunctive2 { Is TestPolymorphic.Disjunctive; }

	Browse DisjunctiveBrowse TestPolymorphic.Disjunctive
	{
		Take Subtype;
		Take Disjunctive1;
		Take 'Disjunctive2.ID';
		Take 'Disjunctive2.Days';
	}
}

//=========================================================
// Multiple implementations of a same polymorphic type at the same entity.
	
Module TestPolymorphic
{
	Entity MultipleImplementations
	{
		ShortString Name1;
		ShortString Name2;

		Is TestPolymorphic.Base1;
		Is TestPolymorphic.Base1 'Reverse'
		{
			Implements TestPolymorphic.Base1.Name1 "REVERSE(Name1)";
		}
		Is TestPolymorphic.Base2;
		Is TestPolymorphic.Base2 'Reverse'
		{
			Implements TestPolymorphic.Base2.Name2 "REVERSE(Name2)";
		}
		Is TestPolymorphic.Base3
		{
			Implements TestPolymorphic.Base3.Name1 "Name1 + '-3'";
		}
	}
	
	Polymorphic Base1
	{
		ShortString Name1;
		Materialized;
	}
	
	Polymorphic Base2
	{
		ShortString Name2;
	}
	
	Polymorphic Base3
	{
		ShortString Name1;
	}
}

//=========================================================
// Subtype implementation in a different module.

Module TestPolymorphic
{
	Polymorphic DifferentModuleBase
	{
		ShortString Name;
	}
	
	Entity DifferentModule
	{
		ShortString Code;
		Is TestPolymorphic.DifferentModuleBase
		{
			Implements TestPolymorphic.DifferentModuleBase.Name "Code + '1'";
		}
	}
}

Module TestPolymorphic2
{
	Entity DifferentModule
	{
		ShortString Code;
		Is TestPolymorphic.DifferentModuleBase
		{
			Implements TestPolymorphic.DifferentModuleBase.Name "Code + '2'";
		}
	}
}
	
//=========================================================
// Specific complex subtype implementations

Module TestPolymorphic
{
	Polymorphic ComplexBase
	{
		ShortString Name1;
		Materialized;
	}
	
	Entity ComplexImplementationData
	{
		ShortString a;
	}
	
	SqlQueryable ComplexImplementationQuery "SELECT ID, a = 'abc' FROM TestPolymorphic.ComplexImplementationData"
	{
		Extends TestPolymorphic.ComplexImplementationData;
		ShortString a;
		
		AutoDetectSqlDependencies;
		Is TestPolymorphic.ComplexBase
		{
			Implements TestPolymorphic.ComplexBase.Name1 "a + '1'";
		}
		Is TestPolymorphic.ComplexBase 'q2'
		{
			Implements TestPolymorphic.ComplexBase.Name1 "a + '2'";
		}
	}

	Entity ComplexImplementationSql
	{
		ShortString s;
		Guid AlternativeId; // Update of ComplexBase_Materialized might not be supported if AlternativeId does not match ID value hashed with the implementation name.
		
		Is TestPolymorphic.ComplexBase
		{
			SqlImplementation "SELECT ID, Name1 = s + '3' FROM TestPolymorphic.ComplexImplementationSql"
			{
				AutoDetectSqlDependencies;
			}
		}
		
		Is TestPolymorphic.ComplexBase 'sql2'
		{
			SqlImplementation "SELECT ID, SubtypeImplementationID = AlternativeId, Name1 = s + '4' FROM TestPolymorphic.ComplexImplementationSql"
			{
				AutoDetectSqlDependencies;
			}
		}
	}
}

//=========================================================
// Reference test
	
Module TestPolymorphic
{
	Entity Parent
	{
		ShortString Name;
	}
	
	Polymorphic Child
	{
		ShortString Name;
		Reference Parent;
	}
	
	Entity ChildA
	{
		ShortString Name;
		Reference Parent;

		Is TestPolymorphic.Child;
	}
	
	Entity ChildB
	{
		ShortString Name;
		Reference Parent;

		Guid ManualParentID;
		
		Is TestPolymorphic.Child
		{
			Implements TestPolymorphic.Child.Parent "ManualParentID";
		}
	}
	
	Browse ChildBrowse TestPolymorphic.Child
	{
		Take Name;
		Take 'Parent.Name';
	}
}

//=========================================================
// Limit the implementation with filter (where)

Module TestPolymorphic
{
	Polymorphic ActiveRecords
	{
		ShortString Name;
		Materialized;
	}
	
	Entity DeactivatableEntity
	{
		Deactivatable;

		ShortString Name;	

		Is TestPolymorphic.ActiveRecords
		{
			Where "Active = 1";
			Where "Name LIKE 'd%'";
		}
	}
}

//=========================================================
// Combination with other featureas:

Module TestPolymorphic
{
	Polymorphic OtherFeaturesBase
	{
		ShortString Name;
	}
	
	Entity OtherFeatures
	{
		ShortString Name;
		Is TestPolymorphic.OtherFeaturesBase 'Alternative';

		ShortString Code { AutoCode; }
	}
}

//=========================================================
// Database dependencies:

Module TestPolymorphic
{
    Polymorphic PolyWithDependencies
    {
        ShortString Name;
    }

    SqlQueryable DependentQuery "SELECT ID, Name FROM TestPolymorphic.PolyWithDependencies"
    {
        ShortString Name;
        SqlDependsOn TestPolymorphic.PolyWithDependencies;
    }
}
