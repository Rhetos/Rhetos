/*
    Copyright (C) 2014 Omega software d.o.o.

    This file is part of Rhetos.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

using Microsoft.VisualStudio.TestTools.UnitTesting;
using Rhetos.Dom.DefaultConcepts;
using Rhetos.Dsl;
using Rhetos.Dsl.DefaultConcepts;
using Rhetos.TestCommon;
using Rhetos.Utilities;
using System;
using System.Linq;

namespace CommonConcepts.Test
{
    [TestClass]
    public class PersistedAllPropertiesTest
    {
        [TestMethod]
        public void QueryableFromRepository()
        {
            using (var scope = TestScope.Create())
            {
                var dslModel = scope.Resolve<IDslModel>();

                var persisted = (DataStructureInfo)dslModel.FindByKey("DataStructureInfo TestAllProperties.TestAllPropertiesCopyAllFeatures");

                var extends = dslModel.FindByReference<DataStructureExtendsInfo>(e => e.Extension, persisted);
                Assert.AreEqual(
                    "Entity TestAllProperties.Base",
                    TestUtility.DumpSorted(extends, e => e.Base.GetUserDescription()));

                var properties = dslModel.FindByReference<PropertyInfo>(p => p.DataStructure, persisted);
                Assert.AreEqual(
                    "DateTime Start, Reference TheParent, ShortString Name",
                    TestUtility.DumpSorted(properties, p => $"{p.GetKeywordOrTypeName()} {p.Name}"));

                var cascadeDeleteBase = dslModel.FindByReference<UniqueReferenceCascadeDeleteInfo>(cd => cd.UniqueReference, extends.Single());
                Assert.AreEqual(1, cascadeDeleteBase.Count());

                var reference = properties.OfType<ReferencePropertyInfo>().Single();
                var cascadeDeleteReference = dslModel.FindByReference<ReferenceCascadeDeleteInfo>(cd => cd.Reference, reference);
                Assert.AreEqual(1, cascadeDeleteReference.Count());

                var indexes = dslModel.FindByReference<SqlIndexMultipleInfo>(i => i.DataStructure, persisted);
                Assert.AreEqual(
                    "Name, Name Start, Name Start TheParent, TheParent",
                    // "Name" has SqlIndex, "Name Start" and "Name Start TheParent" are Unique, "TheParent" index is generated by Detail.
                    TestUtility.DumpSorted(indexes, i => i.PropertyNames));
            }
        }

        [TestMethod]
        public void BrowseUsingImplicitlyCreatedProperties()
        {
            using (var scope = TestScope.Create())
            {
                scope.Resolve<ISqlExecuter>().ExecuteSql(new[] { "DELETE FROM TestAllProperties.Base;" });

                var repository = scope.Resolve<Common.DomRepository>();

                repository.TestAllProperties.TestAllPropertiesCopyAllFeatures.Recompute();
                Assert.AreEqual("", TestUtility.DumpSorted(
                    repository.TestAllProperties.UsesImplicitlyCreatedProperties.Query(), item => item.ComputedName), "initial state");

                var parentId = Guid.NewGuid();
                repository.TestAllProperties.Parent.Insert(new[] { new TestAllProperties.Parent { ID = parentId } });

                var id = Guid.NewGuid();
                repository.TestAllProperties.Base.Insert(new[] { new TestAllProperties.Base { ID = id } });
                repository.TestAllProperties.Source.Insert(new[] { new TestAllProperties.Source { ID = id, Name = "abc", TheParentID = parentId } });

                repository.TestAllProperties.TestAllPropertiesCopyAllFeatures.Recompute();
                Assert.AreEqual("abc", TestUtility.DumpSorted(
                    repository.TestAllProperties.UsesImplicitlyCreatedProperties.Query(), item => item.ComputedName), "after persisting data from 'Source' to 'TestAllPropertiesCopyAllFeatures'.");
            }
        }
    }
}
